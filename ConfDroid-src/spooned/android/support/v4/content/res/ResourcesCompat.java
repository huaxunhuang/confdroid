/**
 * Copyright (C) 2014 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package android.support.v4.content.res;


/**
 * Helper for accessing features in {@link android.content.res.Resources}
 * introduced after API level 4 in a backwards compatible fashion.
 */
public final class ResourcesCompat {
    /**
     * Return a drawable object associated with a particular resource ID and
     * styled for the specified theme. Various types of objects will be
     * returned depending on the underlying resource -- for example, a solid
     * color, PNG image, scalable image, etc.
     * <p>
     * Prior to API level 21, the theme will not be applied and this method
     * simply calls through to {@link Resources#getDrawable(int)}.
     *
     * @param id
     * 		The desired resource identifier, as generated by the aapt
     * 		tool. This integer encodes the package, type, and resource
     * 		entry. The value 0 is an invalid identifier.
     * @param theme
     * 		The theme used to style the drawable attributes, may be
     * 		{@code null}.
     * @return Drawable An object that can be used to draw this resource.
     * @throws NotFoundException
     * 		Throws NotFoundException if the given ID does
     * 		not exist.
     */
    @android.support.annotation.Nullable
    @java.lang.SuppressWarnings("deprecation")
    public static android.graphics.drawable.Drawable getDrawable(@android.support.annotation.NonNull
    android.content.res.Resources res, @android.support.annotation.DrawableRes
    int id, @android.support.annotation.Nullable
    android.content.res.Resources.Theme theme) throws android.content.res.Resources.NotFoundException {
        if (android.os.Build.VERSION.SDK_INT >= 21) {
            return android.support.v4.content.res.ResourcesCompatApi21.getDrawable(res, id, theme);
        } else {
            return res.getDrawable(id);
        }
    }

    /**
     * Return a drawable object associated with a particular resource ID for
     * the given screen density in DPI and styled for the specified theme.
     * <p>
     * Prior to API level 15, the theme and density will not be applied and
     * this method simply calls through to {@link Resources#getDrawable(int)}.
     * <p>
     * Prior to API level 21, the theme will not be applied and this method
     * calls through to Resources#getDrawableForDensity(int, int).
     *
     * @param id
     * 		The desired resource identifier, as generated by the aapt
     * 		tool. This integer encodes the package, type, and resource
     * 		entry. The value 0 is an invalid identifier.
     * @param density
     * 		The desired screen density indicated by the resource as
     * 		found in {@link android.util.DisplayMetrics}.
     * @param theme
     * 		The theme used to style the drawable attributes, may be
     * 		{@code null}.
     * @return Drawable An object that can be used to draw this resource.
     * @throws NotFoundException
     * 		Throws NotFoundException if the given ID does
     * 		not exist.
     */
    @android.support.annotation.Nullable
    @java.lang.SuppressWarnings("deprecation")
    public static android.graphics.drawable.Drawable getDrawableForDensity(@android.support.annotation.NonNull
    android.content.res.Resources res, @android.support.annotation.DrawableRes
    int id, int density, @android.support.annotation.Nullable
    android.content.res.Resources.Theme theme) throws android.content.res.Resources.NotFoundException {
        if (android.os.Build.VERSION.SDK_INT >= 21) {
            return android.support.v4.content.res.ResourcesCompatApi21.getDrawableForDensity(res, id, density, theme);
        } else
            if (android.os.Build.VERSION.SDK_INT >= 15) {
                return android.support.v4.content.res.ResourcesCompatIcsMr1.getDrawableForDensity(res, id, density);
            } else {
                return res.getDrawable(id);
            }

    }

    /**
     * Returns a themed color integer associated with a particular resource ID.
     * If the resource holds a complex {@link ColorStateList}, then the default
     * color from the set is returned.
     * <p>
     * Prior to API level 23, the theme will not be applied and this method
     * calls through to {@link Resources#getColor(int)}.
     *
     * @param id
     * 		The desired resource identifier, as generated by the aapt
     * 		tool. This integer encodes the package, type, and resource
     * 		entry. The value 0 is an invalid identifier.
     * @param theme
     * 		The theme used to style the color attributes, may be
     * 		{@code null}.
     * @return A single color value in the form {@code 0xAARRGGBB}.
     * @throws NotFoundException
     * 		Throws NotFoundException if the given ID does
     * 		not exist.
     */
    @android.support.annotation.ColorInt
    @java.lang.SuppressWarnings("deprecation")
    public static int getColor(@android.support.annotation.NonNull
    android.content.res.Resources res, @android.support.annotation.ColorRes
    int id, @android.support.annotation.Nullable
    android.content.res.Resources.Theme theme) throws android.content.res.Resources.NotFoundException {
        if (android.os.Build.VERSION.SDK_INT >= 23) {
            return android.support.v4.content.res.ResourcesCompatApi23.getColor(res, id, theme);
        } else {
            return res.getColor(id);
        }
    }

    /**
     * Returns a themed color state list associated with a particular resource
     * ID. The resource may contain either a single raw color value or a
     * complex {@link ColorStateList} holding multiple possible colors.
     * <p>
     * Prior to API level 23, the theme will not be applied and this method
     * calls through to {@link Resources#getColorStateList(int)}.
     *
     * @param id
     * 		The desired resource identifier of a {@link ColorStateList},
     * 		as generated by the aapt tool. This integer encodes the
     * 		package, type, and resource entry. The value 0 is an invalid
     * 		identifier.
     * @param theme
     * 		The theme used to style the color attributes, may be
     * 		{@code null}.
     * @return A themed ColorStateList object containing either a single solid
    color or multiple colors that can be selected based on a state.
     * @throws NotFoundException
     * 		Throws NotFoundException if the given ID does
     * 		not exist.
     */
    @android.support.annotation.Nullable
    @java.lang.SuppressWarnings("deprecation")
    public static android.content.res.ColorStateList getColorStateList(@android.support.annotation.NonNull
    android.content.res.Resources res, @android.support.annotation.ColorRes
    int id, @android.support.annotation.Nullable
    android.content.res.Resources.Theme theme) throws android.content.res.Resources.NotFoundException {
        if (android.os.Build.VERSION.SDK_INT >= 23) {
            return android.support.v4.content.res.ResourcesCompatApi23.getColorStateList(res, id, theme);
        } else {
            return res.getColorStateList(id);
        }
    }

    private ResourcesCompat() {
    }
}

