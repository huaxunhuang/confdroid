/**
 * Copyright (C) 2016 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package android.support.v7.content.res;


/**
 * Class for accessing an application's resources through AppCompat, and thus any backward
 * compatible functionality.
 */
public final class AppCompatResources {
    private static final java.lang.String LOG_TAG = "AppCompatResources";

    private static final java.lang.ThreadLocal<android.util.TypedValue> TL_TYPED_VALUE = new java.lang.ThreadLocal<>();

    private static final java.util.WeakHashMap<android.content.Context, android.util.SparseArray<android.support.v7.content.res.AppCompatResources.ColorStateListCacheEntry>> sColorStateCaches = new java.util.WeakHashMap<>(0);

    private static final java.lang.Object sColorStateCacheLock = new java.lang.Object();

    private AppCompatResources() {
    }

    /**
     * Returns the {@link ColorStateList} from the given resource. The resource can include
     * themeable attributes, regardless of API level.
     *
     * @param context
     * 		context to inflate against
     * @param resId
     * 		the resource identifier of the ColorStateList to retrieve
     */
    public static android.content.res.ColorStateList getColorStateList(@android.support.annotation.NonNull
    android.content.Context context, @android.support.annotation.ColorRes
    int resId) {
        if (android.os.Build.VERSION.SDK_INT >= 23) {
            // On M+ we can use the framework
            return context.getColorStateList(resId);
        }
        // Before that, we'll try handle it ourselves
        android.content.res.ColorStateList csl = android.support.v7.content.res.AppCompatResources.getCachedColorStateList(context, resId);
        if (csl != null) {
            return csl;
        }
        // Cache miss, so try and inflate it ourselves
        csl = android.support.v7.content.res.AppCompatResources.inflateColorStateList(context, resId);
        if (csl != null) {
            // If we inflated it, add it to the cache and return
            android.support.v7.content.res.AppCompatResources.addColorStateListToCache(context, resId, csl);
            return csl;
        }
        // If we reach here then we couldn't inflate it, so let the framework handle it
        return android.support.v4.content.ContextCompat.getColorStateList(context, resId);
    }

    /**
     * Return a drawable object associated with a particular resource ID.
     *
     * <p>This method supports inflation of {@code <vector>} and {@code <animated-vector>}
     * resources on devices where platform support is not available.</p>
     *
     * @param context
     * 		context to inflate against
     * @param resId
     * 		The desired resource identifier, as generated by the aapt
     * 		tool. This integer encodes the package, type, and resource
     * 		entry. The value 0 is an invalid identifier.
     * @return Drawable An object that can be used to draw this resource.
     * @see ContextCompat#getDrawable(Context, int)
     */
    @android.support.annotation.Nullable
    public static android.graphics.drawable.Drawable getDrawable(@android.support.annotation.NonNull
    android.content.Context context, @android.support.annotation.DrawableRes
    int resId) {
        return android.support.v7.widget.AppCompatDrawableManager.get().getDrawable(context, resId);
    }

    /**
     * Inflates a {@link ColorStateList} from resources, honouring theme attributes.
     */
    @android.support.annotation.Nullable
    private static android.content.res.ColorStateList inflateColorStateList(android.content.Context context, int resId) {
        if (android.support.v7.content.res.AppCompatResources.isColorInt(context, resId)) {
            // The resource is a color int, we can't handle it so return null
            return null;
        }
        final android.content.res.Resources r = context.getResources();
        final org.xmlpull.v1.XmlPullParser xml = r.getXml(resId);
        try {
            return android.support.v7.content.res.AppCompatColorStateListInflater.createFromXml(r, xml, context.getTheme());
        } catch (java.lang.Exception e) {
            android.util.Log.e(android.support.v7.content.res.AppCompatResources.LOG_TAG, "Failed to inflate ColorStateList, leaving it to the framework", e);
        }
        return null;
    }

    @android.support.annotation.Nullable
    private static android.content.res.ColorStateList getCachedColorStateList(@android.support.annotation.NonNull
    android.content.Context context, @android.support.annotation.ColorRes
    int resId) {
        synchronized(android.support.v7.content.res.AppCompatResources.sColorStateCacheLock) {
            final android.util.SparseArray<android.support.v7.content.res.AppCompatResources.ColorStateListCacheEntry> entries = android.support.v7.content.res.AppCompatResources.sColorStateCaches.get(context);
            if ((entries != null) && (entries.size() > 0)) {
                final android.support.v7.content.res.AppCompatResources.ColorStateListCacheEntry entry = entries.get(resId);
                if (entry != null) {
                    if (entry.configuration.equals(context.getResources().getConfiguration())) {
                        // If the current configuration matches the entry's, we can use it
                        return entry.value;
                    } else {
                        // Otherwise we'll remove the entry
                        entries.remove(resId);
                    }
                }
            }
        }
        return null;
    }

    private static void addColorStateListToCache(@android.support.annotation.NonNull
    android.content.Context context, @android.support.annotation.ColorRes
    int resId, @android.support.annotation.NonNull
    android.content.res.ColorStateList value) {
        synchronized(android.support.v7.content.res.AppCompatResources.sColorStateCacheLock) {
            android.util.SparseArray<android.support.v7.content.res.AppCompatResources.ColorStateListCacheEntry> entries = android.support.v7.content.res.AppCompatResources.sColorStateCaches.get(context);
            if (entries == null) {
                entries = new android.util.SparseArray<>();
                android.support.v7.content.res.AppCompatResources.sColorStateCaches.put(context, entries);
            }
            entries.append(resId, new android.support.v7.content.res.AppCompatResources.ColorStateListCacheEntry(value, context.getResources().getConfiguration()));
        }
    }

    private static boolean isColorInt(@android.support.annotation.NonNull
    android.content.Context context, @android.support.annotation.ColorRes
    int resId) {
        final android.content.res.Resources r = context.getResources();
        final android.util.TypedValue value = android.support.v7.content.res.AppCompatResources.getTypedValue();
        r.getValue(resId, value, true);
        return (value.type >= android.util.TypedValue.TYPE_FIRST_COLOR_INT) && (value.type <= android.util.TypedValue.TYPE_LAST_COLOR_INT);
    }

    @android.support.annotation.NonNull
    private static android.util.TypedValue getTypedValue() {
        android.util.TypedValue tv = android.support.v7.content.res.AppCompatResources.TL_TYPED_VALUE.get();
        if (tv == null) {
            tv = new android.util.TypedValue();
            android.support.v7.content.res.AppCompatResources.TL_TYPED_VALUE.set(tv);
        }
        return tv;
    }

    private static class ColorStateListCacheEntry {
        final android.content.res.ColorStateList value;

        final android.content.res.Configuration configuration;

        ColorStateListCacheEntry(@android.support.annotation.NonNull
        android.content.res.ColorStateList value, @android.support.annotation.NonNull
        android.content.res.Configuration configuration) {
            this.value = value;
            this.configuration = configuration;
        }
    }
}

