/**
 * Copyright (C) 2019 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package android.view.inputmethod;


/**
 * This class represents the description of an inline suggestion. It contains information to help
 * the IME to decide where and when to show the suggestions. See {@link InlineSuggestion} for more
 * information.
 */
// @formatter:on
// End of generated code
@com.android.internal.util.DataClass(genEqualsHashCode = true, genToString = true, genHiddenConstDefs = true, genHiddenConstructor = true)
public final class InlineSuggestionInfo implements android.os.Parcelable {
    /**
     * Suggestion source: the suggestion is made by the user selected autofill service.
     */
    @android.view.inputmethod.InlineSuggestionInfo.Source
    public static final java.lang.String SOURCE_AUTOFILL = "android:autofill";

    /**
     * Suggestion source: the suggestion is made by the platform.
     */
    @android.view.inputmethod.InlineSuggestionInfo.Source
    public static final java.lang.String SOURCE_PLATFORM = "android:platform";

    /**
     * UI type: the UI contains an Autofill suggestion that will autofill the fields when tapped.
     */
    @android.view.inputmethod.InlineSuggestionInfo.Type
    public static final java.lang.String TYPE_SUGGESTION = "android:autofill:suggestion";

    /**
     * UI type: the UI contains an widget that will launch an intent when tapped.
     */
    @android.annotation.SuppressLint({ "IntentName" })
    @android.view.inputmethod.InlineSuggestionInfo.Type
    public static final java.lang.String TYPE_ACTION = "android:autofill:action";

    /**
     * The presentation spec to which the inflated suggestion view abides.
     */
    @android.annotation.NonNull
    private final android.widget.inline.InlinePresentationSpec mInlinePresentationSpec;

    /**
     * The source from which the suggestion is provided.
     */
    @android.annotation.NonNull
    @android.view.inputmethod.InlineSuggestionInfo.Source
    private final java.lang.String mSource;

    /**
     * Hints for the type of data being suggested.
     */
    @android.annotation.Nullable
    private final java.lang.String[] mAutofillHints;

    /**
     * The type of the UI.
     */
    @android.annotation.NonNull
    @android.view.inputmethod.InlineSuggestionInfo.Type
    private final java.lang.String mType;

    /**
     * Whether the suggestion should be pinned or not.
     */
    private final boolean mPinned;

    /**
     * Creates a new {@link InlineSuggestionInfo}, for testing purpose.
     *
     * @unknown 
     */
    @android.annotation.TestApi
    @android.annotation.NonNull
    public static android.view.inputmethod.InlineSuggestionInfo newInlineSuggestionInfo(@android.annotation.NonNull
    android.widget.inline.InlinePresentationSpec presentationSpec, @android.annotation.NonNull
    @android.view.inputmethod.InlineSuggestionInfo.Source
    java.lang.String source, @android.annotation.Nullable
    java.lang.String[] autofillHints, @android.annotation.NonNull
    @android.view.inputmethod.InlineSuggestionInfo.Type
    java.lang.String type, boolean isPinned) {
        return new android.view.inputmethod.InlineSuggestionInfo(presentationSpec, source, autofillHints, type, isPinned);
    }

    // Code below generated by codegen v1.0.15.
    // 
    // DO NOT MODIFY!
    // CHECKSTYLE:OFF Generated code
    // 
    // To regenerate run:
    // $ codegen $ANDROID_BUILD_TOP/frameworks/base/core/java/android/view/inputmethod/InlineSuggestionInfo.java
    // 
    // To exclude the generated code from IntelliJ auto-formatting enable (one-time):
    // Settings > Editor > Code Style > Formatter Control
    // @formatter:off
    /**
     *
     *
     * @unknown 
     */
    @android.annotation.StringDef(prefix = "SOURCE_", value = { android.view.inputmethod.InlineSuggestionInfo.SOURCE_AUTOFILL, android.view.inputmethod.InlineSuggestionInfo.SOURCE_PLATFORM })
    @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE)
    @com.android.internal.util.DataClass.Generated.Member
    public @interface Source {}

    /**
     *
     *
     * @unknown 
     */
    @android.annotation.StringDef(prefix = "TYPE_", value = { android.view.inputmethod.InlineSuggestionInfo.TYPE_SUGGESTION, android.view.inputmethod.InlineSuggestionInfo.TYPE_ACTION })
    @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE)
    @com.android.internal.util.DataClass.Generated.Member
    public @interface Type {}

    /**
     * Creates a new InlineSuggestionInfo.
     *
     * @param inlinePresentationSpec
     * 		The presentation spec to which the inflated suggestion view abides.
     * @param source
     * 		The source from which the suggestion is provided.
     * @param autofillHints
     * 		Hints for the type of data being suggested.
     * @param type
     * 		The type of the UI.
     * @param pinned
     * 		Whether the suggestion should be pinned or not.
     * @unknown 
     */
    @com.android.internal.util.DataClass.Generated.Member
    public InlineSuggestionInfo(@android.annotation.NonNull
    android.widget.inline.InlinePresentationSpec inlinePresentationSpec, @android.annotation.NonNull
    @android.view.inputmethod.InlineSuggestionInfo.Source
    java.lang.String source, @android.annotation.Nullable
    java.lang.String[] autofillHints, @android.annotation.NonNull
    @android.view.inputmethod.InlineSuggestionInfo.Type
    java.lang.String type, boolean pinned) {
        this.mInlinePresentationSpec = inlinePresentationSpec;
        com.android.internal.util.AnnotationValidations.validate(android.annotation.NonNull.class, null, mInlinePresentationSpec);
        this.mSource = source;
        if ((!java.util.Objects.equals(mSource, android.view.inputmethod.InlineSuggestionInfo.SOURCE_AUTOFILL)) && (!java.util.Objects.equals(mSource, android.view.inputmethod.InlineSuggestionInfo.SOURCE_PLATFORM))) {
            throw new java.lang.IllegalArgumentException(((((((("source was " + mSource) + " but must be one of: ") + "SOURCE_AUTOFILL(") + android.view.inputmethod.InlineSuggestionInfo.SOURCE_AUTOFILL) + "), ") + "SOURCE_PLATFORM(") + android.view.inputmethod.InlineSuggestionInfo.SOURCE_PLATFORM) + ")");
        }
        com.android.internal.util.AnnotationValidations.validate(android.annotation.NonNull.class, null, mSource);
        this.mAutofillHints = autofillHints;
        this.mType = type;
        if ((!java.util.Objects.equals(mType, android.view.inputmethod.InlineSuggestionInfo.TYPE_SUGGESTION)) && (!java.util.Objects.equals(mType, android.view.inputmethod.InlineSuggestionInfo.TYPE_ACTION))) {
            throw new java.lang.IllegalArgumentException(((((((("type was " + mType) + " but must be one of: ") + "TYPE_SUGGESTION(") + android.view.inputmethod.InlineSuggestionInfo.TYPE_SUGGESTION) + "), ") + "TYPE_ACTION(") + android.view.inputmethod.InlineSuggestionInfo.TYPE_ACTION) + ")");
        }
        com.android.internal.util.AnnotationValidations.validate(android.annotation.NonNull.class, null, mType);
        this.mPinned = pinned;
        // onConstructed(); // You can define this method to get a callback
    }

    /**
     * The presentation spec to which the inflated suggestion view abides.
     */
    @com.android.internal.util.DataClass.Generated.Member
    @android.annotation.NonNull
    public android.widget.inline.InlinePresentationSpec getInlinePresentationSpec() {
        return mInlinePresentationSpec;
    }

    /**
     * The source from which the suggestion is provided.
     */
    @com.android.internal.util.DataClass.Generated.Member
    @android.annotation.NonNull
    @android.view.inputmethod.InlineSuggestionInfo.Source
    public java.lang.String getSource() {
        return mSource;
    }

    /**
     * Hints for the type of data being suggested.
     */
    @com.android.internal.util.DataClass.Generated.Member
    @android.annotation.Nullable
    public java.lang.String[] getAutofillHints() {
        return mAutofillHints;
    }

    /**
     * The type of the UI.
     */
    @com.android.internal.util.DataClass.Generated.Member
    @android.annotation.NonNull
    @android.view.inputmethod.InlineSuggestionInfo.Type
    public java.lang.String getType() {
        return mType;
    }

    /**
     * Whether the suggestion should be pinned or not.
     */
    @com.android.internal.util.DataClass.Generated.Member
    public boolean isPinned() {
        return mPinned;
    }

    @java.lang.Override
    @com.android.internal.util.DataClass.Generated.Member
    public java.lang.String toString() {
        // You can override field toString logic by defining methods like:
        // String fieldNameToString() { ... }
        return (((((((((((((("InlineSuggestionInfo { " + "inlinePresentationSpec = ") + mInlinePresentationSpec) + ", ") + "source = ") + mSource) + ", ") + "autofillHints = ") + java.util.Arrays.toString(mAutofillHints)) + ", ") + "type = ") + mType) + ", ") + "pinned = ") + mPinned) + " }";
    }

    @java.lang.Override
    @com.android.internal.util.DataClass.Generated.Member
    public boolean equals(@android.annotation.Nullable
    java.lang.Object o) {
        // You can override field equality logic by defining either of the methods like:
        // boolean fieldNameEquals(InlineSuggestionInfo other) { ... }
        // boolean fieldNameEquals(FieldType otherValue) { ... }
        if (this == o)
            return true;

        if ((o == null) || (getClass() != o.getClass()))
            return false;

        @java.lang.SuppressWarnings("unchecked")
        android.view.inputmethod.InlineSuggestionInfo that = ((android.view.inputmethod.InlineSuggestionInfo) (o));
        // noinspection PointlessBooleanExpression
        return ((((true && java.util.Objects.equals(mInlinePresentationSpec, that.mInlinePresentationSpec)) && java.util.Objects.equals(mSource, that.mSource)) && java.util.Arrays.equals(mAutofillHints, that.mAutofillHints)) && java.util.Objects.equals(mType, that.mType)) && (mPinned == that.mPinned);
    }

    @java.lang.Override
    @com.android.internal.util.DataClass.Generated.Member
    public int hashCode() {
        // You can override field hashCode logic by defining methods like:
        // int fieldNameHashCode() { ... }
        int _hash = 1;
        _hash = (31 * _hash) + java.util.Objects.hashCode(mInlinePresentationSpec);
        _hash = (31 * _hash) + java.util.Objects.hashCode(mSource);
        _hash = (31 * _hash) + java.util.Arrays.hashCode(mAutofillHints);
        _hash = (31 * _hash) + java.util.Objects.hashCode(mType);
        _hash = (31 * _hash) + java.lang.Boolean.hashCode(mPinned);
        return _hash;
    }

    @java.lang.Override
    @com.android.internal.util.DataClass.Generated.Member
    public void writeToParcel(@android.annotation.NonNull
    android.os.Parcel dest, int flags) {
        // You can override field parcelling by defining methods like:
        // void parcelFieldName(Parcel dest, int flags) { ... }
        byte flg = 0;
        if (mPinned)
            flg |= 0x10;

        if (mAutofillHints != null)
            flg |= 0x4;

        dest.writeByte(flg);
        dest.writeTypedObject(mInlinePresentationSpec, flags);
        dest.writeString(mSource);
        if (mAutofillHints != null)
            dest.writeStringArray(mAutofillHints);

        dest.writeString(mType);
    }

    @java.lang.Override
    @com.android.internal.util.DataClass.Generated.Member
    public int describeContents() {
        return 0;
    }

    /**
     *
     *
     * @unknown 
     */
    /* package-private */
    @java.lang.SuppressWarnings({ "unchecked", "RedundantCast" })
    @com.android.internal.util.DataClass.Generated.Member
    InlineSuggestionInfo(@android.annotation.NonNull
    android.os.Parcel in) {
        // You can override field unparcelling by defining methods like:
        // static FieldType unparcelFieldName(Parcel in) { ... }
        byte flg = in.readByte();
        boolean pinned = (flg & 0x10) != 0;
        android.widget.inline.InlinePresentationSpec inlinePresentationSpec = ((android.widget.inline.InlinePresentationSpec) (in.readTypedObject(this.CREATOR)));
        java.lang.String source = in.readString();
        java.lang.String[] autofillHints = ((flg & 0x4) == 0) ? null : in.createStringArray();
        java.lang.String type = in.readString();
        this.mInlinePresentationSpec = inlinePresentationSpec;
        com.android.internal.util.AnnotationValidations.validate(android.annotation.NonNull.class, null, mInlinePresentationSpec);
        this.mSource = source;
        if ((!java.util.Objects.equals(mSource, android.view.inputmethod.InlineSuggestionInfo.SOURCE_AUTOFILL)) && (!java.util.Objects.equals(mSource, android.view.inputmethod.InlineSuggestionInfo.SOURCE_PLATFORM))) {
            throw new java.lang.IllegalArgumentException(((((((("source was " + mSource) + " but must be one of: ") + "SOURCE_AUTOFILL(") + android.view.inputmethod.InlineSuggestionInfo.SOURCE_AUTOFILL) + "), ") + "SOURCE_PLATFORM(") + android.view.inputmethod.InlineSuggestionInfo.SOURCE_PLATFORM) + ")");
        }
        com.android.internal.util.AnnotationValidations.validate(android.annotation.NonNull.class, null, mSource);
        this.mAutofillHints = autofillHints;
        this.mType = type;
        if ((!java.util.Objects.equals(mType, android.view.inputmethod.InlineSuggestionInfo.TYPE_SUGGESTION)) && (!java.util.Objects.equals(mType, android.view.inputmethod.InlineSuggestionInfo.TYPE_ACTION))) {
            throw new java.lang.IllegalArgumentException(((((((("type was " + mType) + " but must be one of: ") + "TYPE_SUGGESTION(") + android.view.inputmethod.InlineSuggestionInfo.TYPE_SUGGESTION) + "), ") + "TYPE_ACTION(") + android.view.inputmethod.InlineSuggestionInfo.TYPE_ACTION) + ")");
        }
        com.android.internal.util.AnnotationValidations.validate(android.annotation.NonNull.class, null, mType);
        this.mPinned = pinned;
        // onConstructed(); // You can define this method to get a callback
    }

    @com.android.internal.util.DataClass.Generated.Member
    @android.annotation.NonNull
    public static final android.os.Parcelable.Creator<android.view.inputmethod.InlineSuggestionInfo> CREATOR = new android.os.Parcelable.Creator<android.view.inputmethod.InlineSuggestionInfo>() {
        @java.lang.Override
        public android.view.inputmethod.InlineSuggestionInfo[] newArray(int size) {
            return new android.view.inputmethod.InlineSuggestionInfo[size];
        }

        @java.lang.Override
        public android.view.inputmethod.InlineSuggestionInfo createFromParcel(@android.annotation.NonNull
        android.os.Parcel in) {
            return new android.view.inputmethod.InlineSuggestionInfo(in);
        }
    };

    @DataClass.Generated(time = 1586992414034L, codegenVersion = "1.0.15", sourceFile = "frameworks/base/core/java/android/view/inputmethod/InlineSuggestionInfo.java", inputSignatures = "public static final @android.view.inputmethod.InlineSuggestionInfo.Source java.lang.String SOURCE_AUTOFILL\npublic static final @android.view.inputmethod.InlineSuggestionInfo.Source java.lang.String SOURCE_PLATFORM\npublic static final @android.view.inputmethod.InlineSuggestionInfo.Type java.lang.String TYPE_SUGGESTION\npublic static final @android.annotation.SuppressLint({\"IntentName\"}) @android.view.inputmethod.InlineSuggestionInfo.Type java.lang.String TYPE_ACTION\nprivate final @android.annotation.NonNull android.widget.inline.InlinePresentationSpec mInlinePresentationSpec\nprivate final @android.annotation.NonNull @android.view.inputmethod.InlineSuggestionInfo.Source java.lang.String mSource\nprivate final @android.annotation.Nullable java.lang.String[] mAutofillHints\nprivate final @android.annotation.NonNull @android.view.inputmethod.InlineSuggestionInfo.Type java.lang.String mType\nprivate final  boolean mPinned\npublic static @android.annotation.TestApi @android.annotation.NonNull android.view.inputmethod.InlineSuggestionInfo newInlineSuggestionInfo(android.widget.inline.InlinePresentationSpec,java.lang.String,java.lang.String[],java.lang.String,boolean)\nclass InlineSuggestionInfo extends java.lang.Object implements [android.os.Parcelable]\n@com.android.internal.util.DataClass(genEqualsHashCode=true, genToString=true, genHiddenConstDefs=true, genHiddenConstructor=true)")
    @java.lang.Deprecated
    private void __metadata() {
    }
}

