/**
 * Copyright (C) 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package android.view.contentcapture;


/**
 * Container class representing a request to share data with Content Capture service.
 */
// @formatter:on
// End of generated code
@com.android.internal.util.DataClass(genConstructor = false, genEqualsHashCode = true, genHiddenConstDefs = true, genParcelable = true, genToString = true)
public final class DataShareRequest implements android.os.Parcelable {
    /**
     * Name of the package making the request.
     */
    @android.annotation.NonNull
    private final java.lang.String mPackageName;

    /**
     * Locus id helping to identify what data is being shared.
     */
    @android.annotation.Nullable
    private final android.content.LocusId mLocusId;

    /**
     * MIME type of the data being shared.
     */
    @android.annotation.NonNull
    private final java.lang.String mMimeType;

    /**
     * Constructs a request to share data with the Content Capture Service.
     */
    public DataShareRequest(@android.annotation.Nullable
    android.content.LocusId locusId, @android.annotation.NonNull
    java.lang.String mimeType) {
        com.android.internal.util.Preconditions.checkNotNull(mimeType);
        mPackageName = android.app.ActivityThread.currentActivityThread().getApplication().getPackageName();
        mLocusId = locusId;
        mMimeType = mimeType;
    }

    // Code below generated by codegen v1.0.14.
    // 
    // DO NOT MODIFY!
    // CHECKSTYLE:OFF Generated code
    // 
    // To regenerate run:
    // $ codegen $ANDROID_BUILD_TOP/frameworks/base/core/java/android/view/contentcapture/DataShareRequest.java
    // 
    // To exclude the generated code from IntelliJ auto-formatting enable (one-time):
    // Settings > Editor > Code Style > Formatter Control
    // @formatter:off
    /**
     * Name of the package making the request.
     */
    @com.android.internal.util.DataClass.Generated.Member
    @android.annotation.NonNull
    public java.lang.String getPackageName() {
        return mPackageName;
    }

    /**
     * Locus id helping to identify what data is being shared.
     */
    @com.android.internal.util.DataClass.Generated.Member
    @android.annotation.Nullable
    public android.content.LocusId getLocusId() {
        return mLocusId;
    }

    /**
     * MIME type of the data being shared.
     */
    @com.android.internal.util.DataClass.Generated.Member
    @android.annotation.NonNull
    public java.lang.String getMimeType() {
        return mMimeType;
    }

    @java.lang.Override
    @com.android.internal.util.DataClass.Generated.Member
    public java.lang.String toString() {
        // You can override field toString logic by defining methods like:
        // String fieldNameToString() { ... }
        return (((((((("DataShareRequest { " + "packageName = ") + mPackageName) + ", ") + "locusId = ") + mLocusId) + ", ") + "mimeType = ") + mMimeType) + " }";
    }

    @java.lang.Override
    @com.android.internal.util.DataClass.Generated.Member
    public boolean equals(@android.annotation.Nullable
    java.lang.Object o) {
        // You can override field equality logic by defining either of the methods like:
        // boolean fieldNameEquals(DataShareRequest other) { ... }
        // boolean fieldNameEquals(FieldType otherValue) { ... }
        if (this == o)
            return true;

        if ((o == null) || (getClass() != o.getClass()))
            return false;

        @java.lang.SuppressWarnings("unchecked")
        android.view.contentcapture.DataShareRequest that = ((android.view.contentcapture.DataShareRequest) (o));
        // noinspection PointlessBooleanExpression
        return ((true && java.util.Objects.equals(mPackageName, that.mPackageName)) && java.util.Objects.equals(mLocusId, that.mLocusId)) && java.util.Objects.equals(mMimeType, that.mMimeType);
    }

    @java.lang.Override
    @com.android.internal.util.DataClass.Generated.Member
    public int hashCode() {
        // You can override field hashCode logic by defining methods like:
        // int fieldNameHashCode() { ... }
        int _hash = 1;
        _hash = (31 * _hash) + java.util.Objects.hashCode(mPackageName);
        _hash = (31 * _hash) + java.util.Objects.hashCode(mLocusId);
        _hash = (31 * _hash) + java.util.Objects.hashCode(mMimeType);
        return _hash;
    }

    @java.lang.Override
    @com.android.internal.util.DataClass.Generated.Member
    public void writeToParcel(@android.annotation.NonNull
    android.os.Parcel dest, int flags) {
        // You can override field parcelling by defining methods like:
        // void parcelFieldName(Parcel dest, int flags) { ... }
        byte flg = 0;
        if (mLocusId != null)
            flg |= 0x2;

        dest.writeByte(flg);
        dest.writeString(mPackageName);
        if (mLocusId != null)
            dest.writeTypedObject(mLocusId, flags);

        dest.writeString(mMimeType);
    }

    @java.lang.Override
    @com.android.internal.util.DataClass.Generated.Member
    public int describeContents() {
        return 0;
    }

    /**
     *
     *
     * @unknown 
     */
    /* package-private */
    @java.lang.SuppressWarnings({ "unchecked", "RedundantCast" })
    @com.android.internal.util.DataClass.Generated.Member
    DataShareRequest(@android.annotation.NonNull
    android.os.Parcel in) {
        // You can override field unparcelling by defining methods like:
        // static FieldType unparcelFieldName(Parcel in) { ... }
        byte flg = in.readByte();
        java.lang.String packageName = in.readString();
        android.content.LocusId locusId = ((flg & 0x2) == 0) ? null : ((android.content.LocusId) (in.readTypedObject(this.CREATOR)));
        java.lang.String mimeType = in.readString();
        this.mPackageName = packageName;
        com.android.internal.util.AnnotationValidations.validate(android.annotation.NonNull.class, null, mPackageName);
        this.mLocusId = locusId;
        this.mMimeType = mimeType;
        com.android.internal.util.AnnotationValidations.validate(android.annotation.NonNull.class, null, mMimeType);
        // onConstructed(); // You can define this method to get a callback
    }

    @com.android.internal.util.DataClass.Generated.Member
    @android.annotation.NonNull
    public static final android.os.Parcelable.Creator<android.view.contentcapture.DataShareRequest> CREATOR = new android.os.Parcelable.Creator<android.view.contentcapture.DataShareRequest>() {
        @java.lang.Override
        public android.view.contentcapture.DataShareRequest[] newArray(int size) {
            return new android.view.contentcapture.DataShareRequest[size];
        }

        @java.lang.Override
        public android.view.contentcapture.DataShareRequest createFromParcel(@android.annotation.NonNull
        android.os.Parcel in) {
            return new android.view.contentcapture.DataShareRequest(in);
        }
    };

    @DataClass.Generated(time = 1579870254459L, codegenVersion = "1.0.14", sourceFile = "frameworks/base/core/java/android/view/contentcapture/DataShareRequest.java", inputSignatures = "private final @android.annotation.NonNull java.lang.String mPackageName\nprivate final @android.annotation.Nullable android.content.LocusId mLocusId\nprivate final @android.annotation.NonNull java.lang.String mMimeType\nclass DataShareRequest extends java.lang.Object implements [android.os.Parcelable]\n@com.android.internal.util.DataClass(genConstructor=false, genEqualsHashCode=true, genHiddenConstDefs=true, genParcelable=true, genToString=true)")
    @java.lang.Deprecated
    private void __metadata() {
    }
}

