/**
 * Copyright (C) 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package android.view;


/**
 * KeyEvent that has been verified by the system.
 * The data contained in this class is always a subset of a {@link KeyEvent}. Use this class to
 * check which data has been confirmed by the system to be authentic.
 *
 * Most applications do not need to use this class.
 *
 * {@see android.hardware.input.InputManager#verifyInputEvent}
 */
// @formatter:on
// End of generated code
@com.android.internal.util.DataClass(genHiddenConstructor = true, genEqualsHashCode = true)
public final class VerifiedKeyEvent extends android.view.VerifiedInputEvent implements android.os.Parcelable {
    private static final java.lang.String TAG = "VerifiedKeyEvent";

    /**
     *
     *
     * @unknown 
     */
    @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE)
    @android.annotation.IntDef({ android.view.KeyEvent.ACTION_DOWN, android.view.KeyEvent.ACTION_UP })
    public @interface KeyEventAction {}

    /**
     * The action of this key event.  May be either {@link KeyEvent#ACTION_DOWN} or
     * {@link KeyEvent#ACTION_UP}.
     *
     * @see KeyEvent#getAction()
     */
    @android.view.VerifiedKeyEvent.KeyEventAction
    private int mAction;

    /**
     * Retrieve the time of the most recent key down event, in the
     * {@link android.os.SystemClock#uptimeMillis} time base, but in nanoseconds. If this
     * is a down event, this will be the same as {@link VerifiedInputEvent#getEventTimeNanos()}.
     *
     * @see KeyEvent#getDownTime()
     */
    @android.annotation.SuppressLint({ "MethodNameUnits" })
    private long mDownTimeNanos;

    /**
     * Returns the flags for this key event.
     *
     * @see KeyEvent#getFlags()
     * @see KeyEvent#FLAG_CANCELED
     * @unknown 
     */
    private int mFlags;

    /**
     * Retrieve the key code of the key event.
     *
     * @see KeyEvent#getKeyCode()
     */
    private int mKeyCode;

    /**
     * Retrieve the hardware key id of this key event. These values are not reliable
     * and vary from device to device.
     *
     * @see KeyEvent#getScanCode()
     */
    private int mScanCode;

    /**
     * <p>Returns the state of the meta keys.</p>
     *
     * @return an integer in which each bit set to 1 represents a pressed meta key
     * @see KeyEvent#getMetaState()
     */
    private int mMetaState;

    /**
     * Retrieve the repeat count of the event.  For key down events, this is the number of times
     * the key has repeated with the first down starting at 0 and counting up from there.
     * For key up events, this is always equal to zero. For multiple key events,
     * this is the number of down/up pairs that have occurred.
     */
    private int mRepeatCount;

    /**
     * Get a specific flag of this key event, if possible. Return null if the flag value could
     * not be checked.
     *
     * @param flag
     * 		the flag of interest
     * @return Boolean(true) if the key event has the requested flag
    Boolean(false) if the key event does not have the requested flag
    null if the flag value could not be checked
     * @see KeyEvent#getFlags()
     * @see KeyEvent#FLAG_CANCELED
     */
    @android.annotation.Nullable
    public java.lang.Boolean getFlag(int flag) {
        switch (flag) {
            // InputDispatcher only verifies a subset of the KeyEvent flags.
            // These values must be kept in sync with Input.cpp
            case android.view.KeyEvent.FLAG_CANCELED :
                return (mFlags & flag) != 0;
        }
        return null;
    }

    // The codegen tool doesn't fully support subclasses, since it works on a per-file basis.
    // To modify this file:
    // 1. run codegen on this file
    // 2. edit the constructor signature
    // 3. add the "super" call for constructor that receives a Parcel
    // 4. add the "super" call to the writeToParcel method
    // 5. Update "equals" and "hashcode" methods to include VerifiedInputEvent fields
    // 6. Edit "inputSignatures" to ensure KeyEventAction is properly qualified
    // Code below generated by codegen v1.0.14.
    // 
    // DO NOT MODIFY!
    // CHECKSTYLE:OFF Generated code
    // 
    // To regenerate run:
    // $ codegen $ANDROID_BUILD_TOP/frameworks/base/core/java/android/view/VerifiedKeyEvent.java
    // 
    // To exclude the generated code from IntelliJ auto-formatting enable (one-time):
    // Settings > Editor > Code Style > Formatter Control
    // @formatter:off
    /**
     * Creates a new VerifiedKeyEvent.
     *
     * @param action
     * 		The action of this key event.  May be either {@link KeyEvent#ACTION_DOWN} or
     * 		{@link KeyEvent#ACTION_UP}.
     * @param downTimeNanos
     * 		Retrieve the time of the most recent key down event, in the
     * 		{@link android.os.SystemClock#uptimeMillis} time base, but in nanoseconds. If this
     * 		is a down event, this will be the same as {@link VerifiedInputEvent#getEventTimeNanos()}.
     * @param flags
     * 		Returns the flags for this key event.
     * @param keyCode
     * 		Retrieve the key code of the key event.
     * @param scanCode
     * 		Retrieve the hardware key id of this key event. These values are not reliable
     * 		and vary from device to device.
     * @param metaState
     * 		<p>Returns the state of the meta keys.</p>
     * @param repeatCount
     * 		Retrieve the repeat count of the event.  For key down events, this is the number of times
     * 		the key has repeated with the first down starting at 0 and counting up from there.
     * 		For key up events, this is always equal to zero. For multiple key events,
     * 		this is the number of down/up pairs that have occurred.
     * @unknown 
     */
    @com.android.internal.util.DataClass.Generated.Member
    public VerifiedKeyEvent(int deviceId, long eventTimeNanos, int source, int displayId, @android.view.VerifiedKeyEvent.KeyEventAction
    int action, @android.annotation.SuppressLint({ "MethodNameUnits" })
    long downTimeNanos, int flags, int keyCode, int scanCode, int metaState, int repeatCount) {
        super(android.view.VerifiedInputEvent.VERIFIED_KEY, deviceId, eventTimeNanos, source, displayId);
        this.mAction = action;
        com.android.internal.util.AnnotationValidations.validate(android.view.VerifiedKeyEvent.KeyEventAction.class, null, mAction);
        this.mDownTimeNanos = downTimeNanos;
        com.android.internal.util.AnnotationValidations.validate(android.annotation.SuppressLint.class, null, mDownTimeNanos, "value", "MethodNameUnits");
        this.mFlags = flags;
        this.mKeyCode = keyCode;
        this.mScanCode = scanCode;
        this.mMetaState = metaState;
        this.mRepeatCount = repeatCount;
        // onConstructed(); // You can define this method to get a callback
    }

    /**
     * The action of this key event.  May be either {@link KeyEvent#ACTION_DOWN} or
     * {@link KeyEvent#ACTION_UP}.
     *
     * @see KeyEvent#getAction()
     */
    @com.android.internal.util.DataClass.Generated.Member
    @android.view.VerifiedKeyEvent.KeyEventAction
    public int getAction() {
        return mAction;
    }

    /**
     * Retrieve the time of the most recent key down event, in the
     * {@link android.os.SystemClock#uptimeMillis} time base, but in nanoseconds. If this
     * is a down event, this will be the same as {@link VerifiedInputEvent#getEventTimeNanos()}.
     *
     * @see KeyEvent#getDownTime()
     */
    @com.android.internal.util.DataClass.Generated.Member
    @android.annotation.SuppressLint({ "MethodNameUnits" })
    public long getDownTimeNanos() {
        return mDownTimeNanos;
    }

    /**
     * Returns the flags for this key event.
     *
     * @see KeyEvent#getFlags()
     * @see KeyEvent#FLAG_CANCELED
     * @unknown 
     */
    @com.android.internal.util.DataClass.Generated.Member
    public int getFlags() {
        return mFlags;
    }

    /**
     * Retrieve the key code of the key event.
     *
     * @see KeyEvent#getKeyCode()
     */
    @com.android.internal.util.DataClass.Generated.Member
    public int getKeyCode() {
        return mKeyCode;
    }

    /**
     * Retrieve the hardware key id of this key event. These values are not reliable
     * and vary from device to device.
     *
     * @see KeyEvent#getScanCode()
     */
    @com.android.internal.util.DataClass.Generated.Member
    public int getScanCode() {
        return mScanCode;
    }

    /**
     * <p>Returns the state of the meta keys.</p>
     *
     * @return an integer in which each bit set to 1 represents a pressed meta key
     * @see KeyEvent#getMetaState()
     */
    @com.android.internal.util.DataClass.Generated.Member
    public int getMetaState() {
        return mMetaState;
    }

    /**
     * Retrieve the repeat count of the event.  For key down events, this is the number of times
     * the key has repeated with the first down starting at 0 and counting up from there.
     * For key up events, this is always equal to zero. For multiple key events,
     * this is the number of down/up pairs that have occurred.
     */
    @com.android.internal.util.DataClass.Generated.Member
    public int getRepeatCount() {
        return mRepeatCount;
    }

    @java.lang.Override
    @com.android.internal.util.DataClass.Generated.Member
    public boolean equals(@android.annotation.Nullable
    java.lang.Object o) {
        // You can override field equality logic by defining either of the methods like:
        // boolean fieldNameEquals(VerifiedKeyEvent other) { ... }
        // boolean fieldNameEquals(FieldType otherValue) { ... }
        if (this == o)
            return true;

        if ((o == null) || (getClass() != o.getClass()))
            return false;

        @java.lang.SuppressWarnings("unchecked")
        android.view.VerifiedKeyEvent that = ((android.view.VerifiedKeyEvent) (o));
        // noinspection PointlessBooleanExpression
        return ((((((((((true && (getDeviceId() == that.getDeviceId())) && (getEventTimeNanos() == that.getEventTimeNanos())) && (getSource() == that.getSource())) && (getDisplayId() == that.getDisplayId())) && (mAction == that.mAction)) && (mDownTimeNanos == that.mDownTimeNanos)) && (mFlags == that.mFlags)) && (mKeyCode == that.mKeyCode)) && (mScanCode == that.mScanCode)) && (mMetaState == that.mMetaState)) && (mRepeatCount == that.mRepeatCount);
    }

    @java.lang.Override
    @com.android.internal.util.DataClass.Generated.Member
    public int hashCode() {
        // You can override field hashCode logic by defining methods like:
        // int fieldNameHashCode() { ... }
        int _hash = 1;
        _hash = (31 * _hash) + getDeviceId();
        _hash = (31 * _hash) + java.lang.Long.hashCode(getEventTimeNanos());
        _hash = (31 * _hash) + getSource();
        _hash = (31 * _hash) + getDisplayId();
        _hash = (31 * _hash) + mAction;
        _hash = (31 * _hash) + java.lang.Long.hashCode(mDownTimeNanos);
        _hash = (31 * _hash) + mFlags;
        _hash = (31 * _hash) + mKeyCode;
        _hash = (31 * _hash) + mScanCode;
        _hash = (31 * _hash) + mMetaState;
        _hash = (31 * _hash) + mRepeatCount;
        return _hash;
    }

    @java.lang.Override
    @com.android.internal.util.DataClass.Generated.Member
    public void writeToParcel(@android.annotation.NonNull
    android.os.Parcel dest, int flags) {
        // You can override field parcelling by defining methods like:
        // void parcelFieldName(Parcel dest, int flags) { ... }
        super.writeToParcel(dest, flags);
        dest.writeInt(mAction);
        dest.writeLong(mDownTimeNanos);
        dest.writeInt(mFlags);
        dest.writeInt(mKeyCode);
        dest.writeInt(mScanCode);
        dest.writeInt(mMetaState);
        dest.writeInt(mRepeatCount);
    }

    @java.lang.Override
    @com.android.internal.util.DataClass.Generated.Member
    public int describeContents() {
        return 0;
    }

    /**
     *
     *
     * @unknown 
     */
    /* package-private */
    @java.lang.SuppressWarnings({ "unchecked", "RedundantCast" })
    @com.android.internal.util.DataClass.Generated.Member
    VerifiedKeyEvent(@android.annotation.NonNull
    android.os.Parcel in) {
        // You can override field unparcelling by defining methods like:
        // static FieldType unparcelFieldName(Parcel in) { ... }
        super(in, android.view.VerifiedInputEvent.VERIFIED_KEY);
        int action = in.readInt();
        long downTimeNanos = in.readLong();
        int flags = in.readInt();
        int keyCode = in.readInt();
        int scanCode = in.readInt();
        int metaState = in.readInt();
        int repeatCount = in.readInt();
        this.mAction = action;
        com.android.internal.util.AnnotationValidations.validate(android.view.VerifiedKeyEvent.KeyEventAction.class, null, mAction);
        this.mDownTimeNanos = downTimeNanos;
        com.android.internal.util.AnnotationValidations.validate(android.annotation.SuppressLint.class, null, mDownTimeNanos, "value", "MethodNameUnits");
        this.mFlags = flags;
        this.mKeyCode = keyCode;
        this.mScanCode = scanCode;
        this.mMetaState = metaState;
        this.mRepeatCount = repeatCount;
        // onConstructed(); // You can define this method to get a callback
    }

    @com.android.internal.util.DataClass.Generated.Member
    @android.annotation.NonNull
    public static final android.os.Parcelable.Creator<android.view.VerifiedKeyEvent> CREATOR = new android.os.Parcelable.Creator<android.view.VerifiedKeyEvent>() {
        @java.lang.Override
        public android.view.VerifiedKeyEvent[] newArray(int size) {
            return new android.view.VerifiedKeyEvent[size];
        }

        @java.lang.Override
        public android.view.VerifiedKeyEvent createFromParcel(@android.annotation.NonNull
        android.os.Parcel in) {
            return new android.view.VerifiedKeyEvent(in);
        }
    };

    @DataClass.Generated(time = 1581107066890L, codegenVersion = "1.0.14", sourceFile = "frameworks/base/core/java/android/view/VerifiedKeyEvent.java", inputSignatures = "private static final  java.lang.String TAG\nprivate @android.view.VerifiedKeyEvent.KeyEventAction int mAction\nprivate @android.annotation.SuppressLint({\"MethodNameUnits\"}) long mDownTimeNanos\nprivate  int mFlags\nprivate  int mKeyCode\nprivate  int mScanCode\nprivate  int mMetaState\nprivate  int mRepeatCount\npublic @android.annotation.Nullable java.lang.Boolean getFlag(int)\nclass VerifiedKeyEvent extends android.view.VerifiedInputEvent implements [android.os.Parcelable]\n@com.android.internal.util.DataClass(genHiddenConstructor=true, genEqualsHashCode=true)")
    @java.lang.Deprecated
    private void __metadata() {
    }
}

