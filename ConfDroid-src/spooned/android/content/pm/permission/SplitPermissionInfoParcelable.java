/**
 * Copyright (C) 2019 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package android.content.pm.permission;


/**
 * Parcelable version of {@link android.permission.PermissionManager.SplitPermissionInfo}
 *
 * @unknown 
 */
@com.android.internal.util.DataClass(genEqualsHashCode = true)
public class SplitPermissionInfoParcelable implements android.os.Parcelable {
    /**
     * The permission that is split.
     */
    @android.annotation.NonNull
    private final java.lang.String mSplitPermission;

    /**
     * The permissions that are added.
     */
    @android.annotation.NonNull
    private final java.util.List<java.lang.String> mNewPermissions;

    /**
     * The target API level when the permission was split.
     */
    @android.annotation.IntRange(from = 0)
    private final int mTargetSdk;

    private void onConstructed() {
        com.android.internal.util.Preconditions.checkCollectionElementsNotNull(mNewPermissions, "newPermissions");
    }

    // Code below generated by codegen v1.0.0.
    // 
    // DO NOT MODIFY!
    // 
    // To regenerate run:
    // $ codegen $ANDROID_BUILD_TOP/frameworks/base/core/java/android/content/pm/permission/SplitPermissionInfoParcelable.java
    // 
    // CHECKSTYLE:OFF Generated code
    /**
     * Creates a new SplitPermissionInfoParcelable.
     *
     * @param splitPermission
     * 		The permission that is split.
     * @param newPermissions
     * 		The permissions that are added.
     * @param targetSdk
     * 		The target API level when the permission was split.
     */
    @com.android.internal.util.DataClass.Generated.Member
    public SplitPermissionInfoParcelable(@android.annotation.NonNull
    java.lang.String splitPermission, @android.annotation.NonNull
    java.util.List<java.lang.String> newPermissions, @android.annotation.IntRange(from = 0)
    int targetSdk) {
        this.mSplitPermission = splitPermission;
        com.android.internal.util.AnnotationValidations.validate(android.annotation.NonNull.class, null, mSplitPermission);
        this.mNewPermissions = newPermissions;
        com.android.internal.util.AnnotationValidations.validate(android.annotation.NonNull.class, null, mNewPermissions);
        this.mTargetSdk = targetSdk;
        com.android.internal.util.AnnotationValidations.validate(android.annotation.IntRange.class, null, mTargetSdk, "from", 0);
        onConstructed();
    }

    /**
     * The permission that is split.
     */
    @com.android.internal.util.DataClass.Generated.Member
    @android.annotation.NonNull
    public java.lang.String getSplitPermission() {
        return mSplitPermission;
    }

    /**
     * The permissions that are added.
     */
    @com.android.internal.util.DataClass.Generated.Member
    @android.annotation.NonNull
    public java.util.List<java.lang.String> getNewPermissions() {
        return mNewPermissions;
    }

    /**
     * The target API level when the permission was split.
     */
    @com.android.internal.util.DataClass.Generated.Member
    @android.annotation.IntRange(from = 0)
    public int getTargetSdk() {
        return mTargetSdk;
    }

    @java.lang.Override
    @com.android.internal.util.DataClass.Generated.Member
    public boolean equals(java.lang.Object o) {
        // You can override field equality logic by defining either of the methods like:
        // boolean fieldNameEquals(SplitPermissionInfoParcelable other) { ... }
        // boolean fieldNameEquals(FieldType otherValue) { ... }
        if (this == o)
            return true;

        if ((o == null) || (getClass() != o.getClass()))
            return false;

        @java.lang.SuppressWarnings("unchecked")
        android.content.pm.permission.SplitPermissionInfoParcelable that = ((android.content.pm.permission.SplitPermissionInfoParcelable) (o));
        // noinspection PointlessBooleanExpression
        return ((true && java.util.Objects.equals(mSplitPermission, that.mSplitPermission)) && java.util.Objects.equals(mNewPermissions, that.mNewPermissions)) && (mTargetSdk == that.mTargetSdk);
    }

    @java.lang.Override
    @com.android.internal.util.DataClass.Generated.Member
    public int hashCode() {
        // You can override field hashCode logic by defining methods like:
        // int fieldNameHashCode() { ... }
        int _hash = 1;
        _hash = (31 * _hash) + java.util.Objects.hashCode(mSplitPermission);
        _hash = (31 * _hash) + java.util.Objects.hashCode(mNewPermissions);
        _hash = (31 * _hash) + mTargetSdk;
        return _hash;
    }

    @java.lang.Override
    @com.android.internal.util.DataClass.Generated.Member
    public void writeToParcel(android.os.Parcel dest, int flags) {
        // You can override field parcelling by defining methods like:
        // void parcelFieldName(Parcel dest, int flags) { ... }
        dest.writeString(mSplitPermission);
        dest.writeStringList(mNewPermissions);
        dest.writeInt(mTargetSdk);
    }

    @java.lang.Override
    @com.android.internal.util.DataClass.Generated.Member
    public int describeContents() {
        return 0;
    }

    @com.android.internal.util.DataClass.Generated.Member
    @android.annotation.NonNull
    public static final android.os.Parcelable.Creator<android.content.pm.permission.SplitPermissionInfoParcelable> CREATOR = new android.os.Parcelable.Creator<android.content.pm.permission.SplitPermissionInfoParcelable>() {
        @java.lang.Override
        public android.content.pm.permission.SplitPermissionInfoParcelable[] newArray(int size) {
            return new android.content.pm.permission.SplitPermissionInfoParcelable[size];
        }

        @java.lang.Override
        @java.lang.SuppressWarnings({ "unchecked", "RedundantCast" })
        public android.content.pm.permission.SplitPermissionInfoParcelable createFromParcel(android.os.Parcel in) {
            // You can override field unparcelling by defining methods like:
            // static FieldType unparcelFieldName(Parcel in) { ... }
            java.lang.String splitPermission = in.readString();
            List<java.lang.String> newPermissions = new java.util.ArrayList();
            in.readStringList(newPermissions);
            int targetSdk = in.readInt();
            return new android.content.pm.permission.SplitPermissionInfoParcelable(splitPermission, newPermissions, targetSdk);
        }
    };

    @DataClass.Generated(time = 1567634390477L, codegenVersion = "1.0.0", sourceFile = "frameworks/base/core/java/android/content/pm/permission/SplitPermissionInfoParcelable.java", inputSignatures = "private final @android.annotation.NonNull java.lang.String mSplitPermission\nprivate final @android.annotation.NonNull java.util.List<java.lang.String> mNewPermissions\nprivate final @android.annotation.IntRange(from=0L) int mTargetSdk\nprivate  void onConstructed()\nclass SplitPermissionInfoParcelable extends java.lang.Object implements [android.os.Parcelable]\n@com.android.internal.util.DataClass(genEqualsHashCode=true)")
    @java.lang.Deprecated
    private void __metadata() {
    }
}

