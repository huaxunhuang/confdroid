/**
 * Copyright (C) 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package android.content.pm;


/**
 * Information about a process an app may run.  This corresponds to information collected from the
 * AndroidManifest.xml's &lt;permission-group&gt; tags.
 *
 * @unknown 
 */
// @formatter:on
// End of generated code
@com.android.internal.util.DataClass(genGetters = true, genSetters = false, genParcelable = true, genAidl = false, genBuilder = false)
public class ProcessInfo implements android.os.Parcelable {
    /**
     * The name of the process, fully-qualified based on the app's package name.
     */
    @android.annotation.NonNull
    public java.lang.String name;

    /**
     * If non-null, these are permissions that are not allowed in this process.
     */
    @android.annotation.Nullable
    @com.android.internal.util.DataClass.ParcelWith(Parcelling.BuiltIn.ForInternedStringArraySet.class)
    public android.util.ArraySet<java.lang.String> deniedPermissions;

    /**
     * Indicates if the process has requested GWP-ASan to be enabled, disabled, or left unspecified.
     */
    @android.content.pm.ApplicationInfo.GwpAsanMode
    public int gwpAsanMode;

    @java.lang.Deprecated
    public ProcessInfo(@android.annotation.NonNull
    android.content.pm.ProcessInfo orig) {
        this.name = orig.name;
        this.deniedPermissions = orig.deniedPermissions;
        this.gwpAsanMode = orig.gwpAsanMode;
    }

    // Code below generated by codegen v1.0.15.
    // 
    // DO NOT MODIFY!
    // CHECKSTYLE:OFF Generated code
    // 
    // To regenerate run:
    // $ codegen $ANDROID_BUILD_TOP/frameworks/base/core/java/android/content/pm/ProcessInfo.java
    // 
    // To exclude the generated code from IntelliJ auto-formatting enable (one-time):
    // Settings > Editor > Code Style > Formatter Control
    // @formatter:off
    /**
     * Creates a new ProcessInfo.
     *
     * @param name
     * 		The name of the process, fully-qualified based on the app's package name.
     * @param deniedPermissions
     * 		If non-null, these are permissions that are not allowed in this process.
     * @param gwpAsanMode
     * 		Indicates if the process has requested GWP-ASan to be enabled, disabled, or left unspecified.
     */
    @com.android.internal.util.DataClass.Generated.Member
    public ProcessInfo(@android.annotation.NonNull
    java.lang.String name, @android.annotation.Nullable
    android.util.ArraySet<java.lang.String> deniedPermissions, @android.content.pm.ApplicationInfo.GwpAsanMode
    int gwpAsanMode) {
        this.name = name;
        com.android.internal.util.AnnotationValidations.validate(android.annotation.NonNull.class, null, name);
        this.deniedPermissions = deniedPermissions;
        this.gwpAsanMode = gwpAsanMode;
        com.android.internal.util.AnnotationValidations.validate(android.content.pm.ApplicationInfo.GwpAsanMode.class, null, gwpAsanMode);
        // onConstructed(); // You can define this method to get a callback
    }

    @com.android.internal.util.DataClass.Generated.Member
    static com.android.internal.util.Parcelling<android.util.ArraySet<java.lang.String>> sParcellingForDeniedPermissions = Parcelling.Cache.get(Parcelling.BuiltIn.ForInternedStringArraySet.class);

    static {
        if (android.content.pm.ProcessInfo.sParcellingForDeniedPermissions == null) {
            android.content.pm.ProcessInfo.sParcellingForDeniedPermissions = Parcelling.Cache.put(new com.android.internal.util.Parcelling.BuiltIn.ForInternedStringArraySet());
        }
    }

    @java.lang.Override
    @com.android.internal.util.DataClass.Generated.Member
    public void writeToParcel(@android.annotation.NonNull
    android.os.Parcel dest, int flags) {
        // You can override field parcelling by defining methods like:
        // void parcelFieldName(Parcel dest, int flags) { ... }
        byte flg = 0;
        if (deniedPermissions != null)
            flg |= 0x2;

        dest.writeByte(flg);
        dest.writeString(name);
        android.content.pm.ProcessInfo.sParcellingForDeniedPermissions.parcel(deniedPermissions, dest, flags);
        dest.writeInt(gwpAsanMode);
    }

    @java.lang.Override
    @com.android.internal.util.DataClass.Generated.Member
    public int describeContents() {
        return 0;
    }

    /**
     *
     *
     * @unknown 
     */
    @java.lang.SuppressWarnings({ "unchecked", "RedundantCast" })
    @com.android.internal.util.DataClass.Generated.Member
    protected ProcessInfo(@android.annotation.NonNull
    android.os.Parcel in) {
        // You can override field unparcelling by defining methods like:
        // static FieldType unparcelFieldName(Parcel in) { ... }
        byte flg = in.readByte();
        java.lang.String _name = in.readString();
        android.util.ArraySet<java.lang.String> _deniedPermissions = android.content.pm.ProcessInfo.sParcellingForDeniedPermissions.unparcel(in);
        int _gwpAsanMode = in.readInt();
        this.name = _name;
        com.android.internal.util.AnnotationValidations.validate(android.annotation.NonNull.class, null, name);
        this.deniedPermissions = _deniedPermissions;
        this.gwpAsanMode = _gwpAsanMode;
        com.android.internal.util.AnnotationValidations.validate(android.content.pm.ApplicationInfo.GwpAsanMode.class, null, gwpAsanMode);
        // onConstructed(); // You can define this method to get a callback
    }

    @com.android.internal.util.DataClass.Generated.Member
    @android.annotation.NonNull
    public static final android.os.Parcelable.Creator<android.content.pm.ProcessInfo> CREATOR = new android.os.Parcelable.Creator<android.content.pm.ProcessInfo>() {
        @java.lang.Override
        public android.content.pm.ProcessInfo[] newArray(int size) {
            return new android.content.pm.ProcessInfo[size];
        }

        @java.lang.Override
        public android.content.pm.ProcessInfo createFromParcel(@android.annotation.NonNull
        android.os.Parcel in) {
            return new android.content.pm.ProcessInfo(in);
        }
    };

    @DataClass.Generated(time = 1584555730519L, codegenVersion = "1.0.15", sourceFile = "frameworks/base/core/java/android/content/pm/ProcessInfo.java", inputSignatures = "public @android.annotation.NonNull java.lang.String name\npublic @android.annotation.Nullable @com.android.internal.util.DataClass.ParcelWith(com.android.internal.util.Parcelling.BuiltIn.ForInternedStringArraySet.class) android.util.ArraySet<java.lang.String> deniedPermissions\npublic @android.content.pm.ApplicationInfo.GwpAsanMode int gwpAsanMode\nclass ProcessInfo extends java.lang.Object implements [android.os.Parcelable]\n@com.android.internal.util.DataClass(genGetters=true, genSetters=false, genParcelable=true, genAidl=false, genBuilder=false)")
    @java.lang.Deprecated
    private void __metadata() {
    }
}

