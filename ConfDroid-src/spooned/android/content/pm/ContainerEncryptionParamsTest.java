/**
 * Copyright (C) 2012 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package android.content.pm;


public class ContainerEncryptionParamsTest extends android.test.AndroidTestCase {
    private static final java.lang.String ENC_ALGORITHM = "AES/CBC/PKCS7Padding";

    private static final byte[] IV_BYTES = "FOOBAR".getBytes();

    private static final javax.crypto.spec.IvParameterSpec ENC_PARAMS = new javax.crypto.spec.IvParameterSpec(android.content.pm.ContainerEncryptionParamsTest.IV_BYTES);

    private static final byte[] ENC_KEY_BYTES = "abcd1234wxyz7890".getBytes();

    private static final javax.crypto.SecretKey ENC_KEY = new javax.crypto.spec.SecretKeySpec(android.content.pm.ContainerEncryptionParamsTest.ENC_KEY_BYTES, "RAW");

    private static final java.lang.String MAC_ALGORITHM = "HMAC-SHA1";

    private static final byte[] MAC_KEY_BYTES = "4wxyzabcd1237890".getBytes();

    private static final javax.crypto.SecretKey MAC_KEY = new javax.crypto.spec.SecretKeySpec(android.content.pm.ContainerEncryptionParamsTest.MAC_KEY_BYTES, "RAW");

    private static final byte[] MAC_TAG = "faketag".getBytes();

    private static final int AUTHENTICATED_START = 5;

    private static final int ENCRYPTED_START = 11;

    private static final int DATA_END = 19;

    public void testParcel() throws java.lang.Exception {
        android.content.pm.ContainerEncryptionParams expected = new android.content.pm.ContainerEncryptionParams(android.content.pm.ContainerEncryptionParamsTest.ENC_ALGORITHM, android.content.pm.ContainerEncryptionParamsTest.ENC_PARAMS, android.content.pm.ContainerEncryptionParamsTest.ENC_KEY, android.content.pm.ContainerEncryptionParamsTest.MAC_ALGORITHM, null, android.content.pm.ContainerEncryptionParamsTest.MAC_KEY, android.content.pm.ContainerEncryptionParamsTest.MAC_TAG, android.content.pm.ContainerEncryptionParamsTest.AUTHENTICATED_START, android.content.pm.ContainerEncryptionParamsTest.ENCRYPTED_START, android.content.pm.ContainerEncryptionParamsTest.DATA_END);
        android.os.Parcel parcel = android.os.Parcel.obtain();
        expected.writeToParcel(parcel, 0);
        parcel.setDataPosition(0);
        android.content.pm.ContainerEncryptionParams actual = this.CREATOR.createFromParcel(parcel);
        assertEquals(android.content.pm.ContainerEncryptionParamsTest.ENC_ALGORITHM, actual.getEncryptionAlgorithm());
        if (!(actual.getEncryptionSpec() instanceof javax.crypto.spec.IvParameterSpec)) {
            fail("encryption parameters should be IvParameterSpec");
        } else {
            javax.crypto.spec.IvParameterSpec actualParams = ((javax.crypto.spec.IvParameterSpec) (actual.getEncryptionSpec()));
            assertTrue(java.util.Arrays.equals(android.content.pm.ContainerEncryptionParamsTest.IV_BYTES, actualParams.getIV()));
        }
        assertEquals(android.content.pm.ContainerEncryptionParamsTest.ENC_KEY, actual.getEncryptionKey());
        assertEquals(android.content.pm.ContainerEncryptionParamsTest.MAC_ALGORITHM, actual.getMacAlgorithm());
        assertNull(actual.getMacSpec());
        assertEquals(android.content.pm.ContainerEncryptionParamsTest.MAC_KEY, actual.getMacKey());
        assertTrue(java.util.Arrays.equals(android.content.pm.ContainerEncryptionParamsTest.MAC_TAG, actual.getMacTag()));
        assertEquals(android.content.pm.ContainerEncryptionParamsTest.AUTHENTICATED_START, actual.getAuthenticatedDataStart());
        assertEquals(android.content.pm.ContainerEncryptionParamsTest.ENCRYPTED_START, actual.getEncryptedDataStart());
        assertEquals(android.content.pm.ContainerEncryptionParamsTest.DATA_END, actual.getDataEnd());
    }

    public void testEquals_Success() throws java.lang.Exception {
        android.content.pm.ContainerEncryptionParams params1 = new android.content.pm.ContainerEncryptionParams(android.content.pm.ContainerEncryptionParamsTest.ENC_ALGORITHM, android.content.pm.ContainerEncryptionParamsTest.ENC_PARAMS, android.content.pm.ContainerEncryptionParamsTest.ENC_KEY, android.content.pm.ContainerEncryptionParamsTest.MAC_ALGORITHM, null, android.content.pm.ContainerEncryptionParamsTest.MAC_KEY, android.content.pm.ContainerEncryptionParamsTest.MAC_TAG, android.content.pm.ContainerEncryptionParamsTest.AUTHENTICATED_START, android.content.pm.ContainerEncryptionParamsTest.ENCRYPTED_START, android.content.pm.ContainerEncryptionParamsTest.DATA_END);
        android.content.pm.ContainerEncryptionParams params2 = new android.content.pm.ContainerEncryptionParams(new java.lang.String(android.content.pm.ContainerEncryptionParamsTest.ENC_ALGORITHM), new javax.crypto.spec.IvParameterSpec(android.content.pm.ContainerEncryptionParamsTest.IV_BYTES.clone()), new javax.crypto.spec.SecretKeySpec(android.content.pm.ContainerEncryptionParamsTest.ENC_KEY_BYTES.clone(), "RAW"), new java.lang.String(android.content.pm.ContainerEncryptionParamsTest.MAC_ALGORITHM), null, new javax.crypto.spec.SecretKeySpec(android.content.pm.ContainerEncryptionParamsTest.MAC_KEY_BYTES.clone(), "RAW"), android.content.pm.ContainerEncryptionParamsTest.MAC_TAG, android.content.pm.ContainerEncryptionParamsTest.AUTHENTICATED_START, android.content.pm.ContainerEncryptionParamsTest.ENCRYPTED_START, android.content.pm.ContainerEncryptionParamsTest.DATA_END);
        assertEquals(params1, params2);
    }

    public void testEquals_EncAlgo_Failure() throws java.lang.Exception {
        android.content.pm.ContainerEncryptionParams params1 = new android.content.pm.ContainerEncryptionParams(android.content.pm.ContainerEncryptionParamsTest.ENC_ALGORITHM, android.content.pm.ContainerEncryptionParamsTest.ENC_PARAMS, android.content.pm.ContainerEncryptionParamsTest.ENC_KEY, android.content.pm.ContainerEncryptionParamsTest.MAC_ALGORITHM, null, android.content.pm.ContainerEncryptionParamsTest.MAC_KEY, android.content.pm.ContainerEncryptionParamsTest.MAC_TAG, android.content.pm.ContainerEncryptionParamsTest.AUTHENTICATED_START, android.content.pm.ContainerEncryptionParamsTest.ENCRYPTED_START, android.content.pm.ContainerEncryptionParamsTest.DATA_END);
        android.content.pm.ContainerEncryptionParams params2 = new android.content.pm.ContainerEncryptionParams(new java.lang.String("AES-256/CBC/PKCS7Padding"), new javax.crypto.spec.IvParameterSpec(android.content.pm.ContainerEncryptionParamsTest.IV_BYTES.clone()), new javax.crypto.spec.SecretKeySpec(android.content.pm.ContainerEncryptionParamsTest.ENC_KEY_BYTES.clone(), "RAW"), new java.lang.String(android.content.pm.ContainerEncryptionParamsTest.MAC_ALGORITHM), null, new javax.crypto.spec.SecretKeySpec(android.content.pm.ContainerEncryptionParamsTest.MAC_KEY_BYTES.clone(), "RAW"), android.content.pm.ContainerEncryptionParamsTest.MAC_TAG, android.content.pm.ContainerEncryptionParamsTest.AUTHENTICATED_START, android.content.pm.ContainerEncryptionParamsTest.ENCRYPTED_START, android.content.pm.ContainerEncryptionParamsTest.DATA_END);
        assertFalse(params1.equals(params2));
    }

    public void testEquals_EncParams_Failure() throws java.lang.Exception {
        android.content.pm.ContainerEncryptionParams params1 = new android.content.pm.ContainerEncryptionParams(android.content.pm.ContainerEncryptionParamsTest.ENC_ALGORITHM, android.content.pm.ContainerEncryptionParamsTest.ENC_PARAMS, android.content.pm.ContainerEncryptionParamsTest.ENC_KEY, android.content.pm.ContainerEncryptionParamsTest.MAC_ALGORITHM, null, android.content.pm.ContainerEncryptionParamsTest.MAC_KEY, android.content.pm.ContainerEncryptionParamsTest.MAC_TAG, android.content.pm.ContainerEncryptionParamsTest.AUTHENTICATED_START, android.content.pm.ContainerEncryptionParamsTest.ENCRYPTED_START, android.content.pm.ContainerEncryptionParamsTest.DATA_END);
        android.content.pm.ContainerEncryptionParams params2 = new android.content.pm.ContainerEncryptionParams(new java.lang.String(android.content.pm.ContainerEncryptionParamsTest.ENC_ALGORITHM), new javax.crypto.spec.IvParameterSpec("BLAHBLAH".getBytes()), new javax.crypto.spec.SecretKeySpec(android.content.pm.ContainerEncryptionParamsTest.ENC_KEY_BYTES.clone(), "RAW"), new java.lang.String(android.content.pm.ContainerEncryptionParamsTest.MAC_ALGORITHM), null, new javax.crypto.spec.SecretKeySpec(android.content.pm.ContainerEncryptionParamsTest.MAC_KEY_BYTES.clone(), "RAW"), android.content.pm.ContainerEncryptionParamsTest.MAC_TAG, android.content.pm.ContainerEncryptionParamsTest.AUTHENTICATED_START, android.content.pm.ContainerEncryptionParamsTest.ENCRYPTED_START, android.content.pm.ContainerEncryptionParamsTest.DATA_END);
        assertFalse(params1.equals(params2));
    }

    public void testEquals_EncKey_Failure() throws java.lang.Exception {
        android.content.pm.ContainerEncryptionParams params1 = new android.content.pm.ContainerEncryptionParams(android.content.pm.ContainerEncryptionParamsTest.ENC_ALGORITHM, android.content.pm.ContainerEncryptionParamsTest.ENC_PARAMS, android.content.pm.ContainerEncryptionParamsTest.ENC_KEY, android.content.pm.ContainerEncryptionParamsTest.MAC_ALGORITHM, null, android.content.pm.ContainerEncryptionParamsTest.MAC_KEY, android.content.pm.ContainerEncryptionParamsTest.MAC_TAG, android.content.pm.ContainerEncryptionParamsTest.AUTHENTICATED_START, android.content.pm.ContainerEncryptionParamsTest.ENCRYPTED_START, android.content.pm.ContainerEncryptionParamsTest.DATA_END);
        android.content.pm.ContainerEncryptionParams params2 = new android.content.pm.ContainerEncryptionParams(new java.lang.String(android.content.pm.ContainerEncryptionParamsTest.ENC_ALGORITHM), new javax.crypto.spec.IvParameterSpec(android.content.pm.ContainerEncryptionParamsTest.IV_BYTES.clone()), new javax.crypto.spec.SecretKeySpec("BLAHBLAH".getBytes(), "RAW"), new java.lang.String(android.content.pm.ContainerEncryptionParamsTest.MAC_ALGORITHM), null, new javax.crypto.spec.SecretKeySpec(android.content.pm.ContainerEncryptionParamsTest.MAC_KEY_BYTES.clone(), "RAW"), android.content.pm.ContainerEncryptionParamsTest.MAC_TAG, android.content.pm.ContainerEncryptionParamsTest.AUTHENTICATED_START, android.content.pm.ContainerEncryptionParamsTest.ENCRYPTED_START, android.content.pm.ContainerEncryptionParamsTest.DATA_END);
        assertFalse(params1.equals(params2));
    }

    public void testEquals_MacAlgo_Failure() throws java.lang.Exception {
        android.content.pm.ContainerEncryptionParams params1 = new android.content.pm.ContainerEncryptionParams(android.content.pm.ContainerEncryptionParamsTest.ENC_ALGORITHM, android.content.pm.ContainerEncryptionParamsTest.ENC_PARAMS, android.content.pm.ContainerEncryptionParamsTest.ENC_KEY, android.content.pm.ContainerEncryptionParamsTest.MAC_ALGORITHM, null, android.content.pm.ContainerEncryptionParamsTest.MAC_KEY, android.content.pm.ContainerEncryptionParamsTest.MAC_TAG, android.content.pm.ContainerEncryptionParamsTest.AUTHENTICATED_START, android.content.pm.ContainerEncryptionParamsTest.ENCRYPTED_START, android.content.pm.ContainerEncryptionParamsTest.DATA_END);
        android.content.pm.ContainerEncryptionParams params2 = new android.content.pm.ContainerEncryptionParams(new java.lang.String(android.content.pm.ContainerEncryptionParamsTest.ENC_ALGORITHM), new javax.crypto.spec.IvParameterSpec(android.content.pm.ContainerEncryptionParamsTest.IV_BYTES.clone()), new javax.crypto.spec.SecretKeySpec(android.content.pm.ContainerEncryptionParamsTest.ENC_KEY_BYTES.clone(), "RAW"), "BLAHBLAH", null, new javax.crypto.spec.SecretKeySpec(android.content.pm.ContainerEncryptionParamsTest.MAC_KEY_BYTES.clone(), "RAW"), android.content.pm.ContainerEncryptionParamsTest.MAC_TAG, android.content.pm.ContainerEncryptionParamsTest.AUTHENTICATED_START, android.content.pm.ContainerEncryptionParamsTest.ENCRYPTED_START, android.content.pm.ContainerEncryptionParamsTest.DATA_END);
        assertFalse(params1.equals(params2));
    }

    public void testEquals_MacKey_Failure() throws java.lang.Exception {
        android.content.pm.ContainerEncryptionParams params1 = new android.content.pm.ContainerEncryptionParams(android.content.pm.ContainerEncryptionParamsTest.ENC_ALGORITHM, android.content.pm.ContainerEncryptionParamsTest.ENC_PARAMS, android.content.pm.ContainerEncryptionParamsTest.ENC_KEY, android.content.pm.ContainerEncryptionParamsTest.MAC_ALGORITHM, null, android.content.pm.ContainerEncryptionParamsTest.MAC_KEY, android.content.pm.ContainerEncryptionParamsTest.MAC_TAG, android.content.pm.ContainerEncryptionParamsTest.AUTHENTICATED_START, android.content.pm.ContainerEncryptionParamsTest.ENCRYPTED_START, android.content.pm.ContainerEncryptionParamsTest.DATA_END);
        android.content.pm.ContainerEncryptionParams params2 = new android.content.pm.ContainerEncryptionParams(new java.lang.String(android.content.pm.ContainerEncryptionParamsTest.ENC_ALGORITHM), new javax.crypto.spec.IvParameterSpec(android.content.pm.ContainerEncryptionParamsTest.IV_BYTES.clone()), new javax.crypto.spec.SecretKeySpec(android.content.pm.ContainerEncryptionParamsTest.ENC_KEY_BYTES.clone(), "RAW"), new java.lang.String(android.content.pm.ContainerEncryptionParamsTest.MAC_ALGORITHM), null, new javax.crypto.spec.SecretKeySpec("FAKE_MAC_KEY".getBytes(), "RAW"), android.content.pm.ContainerEncryptionParamsTest.MAC_TAG, android.content.pm.ContainerEncryptionParamsTest.AUTHENTICATED_START, android.content.pm.ContainerEncryptionParamsTest.ENCRYPTED_START, android.content.pm.ContainerEncryptionParamsTest.DATA_END);
        assertFalse(params1.equals(params2));
    }

    public void testEquals_MacTag_Failure() throws java.lang.Exception {
        android.content.pm.ContainerEncryptionParams params1 = new android.content.pm.ContainerEncryptionParams(android.content.pm.ContainerEncryptionParamsTest.ENC_ALGORITHM, android.content.pm.ContainerEncryptionParamsTest.ENC_PARAMS, android.content.pm.ContainerEncryptionParamsTest.ENC_KEY, android.content.pm.ContainerEncryptionParamsTest.MAC_ALGORITHM, null, android.content.pm.ContainerEncryptionParamsTest.MAC_KEY, android.content.pm.ContainerEncryptionParamsTest.MAC_TAG, android.content.pm.ContainerEncryptionParamsTest.AUTHENTICATED_START, android.content.pm.ContainerEncryptionParamsTest.ENCRYPTED_START, android.content.pm.ContainerEncryptionParamsTest.DATA_END);
        android.content.pm.ContainerEncryptionParams params2 = new android.content.pm.ContainerEncryptionParams(new java.lang.String(android.content.pm.ContainerEncryptionParamsTest.ENC_ALGORITHM), new javax.crypto.spec.IvParameterSpec(android.content.pm.ContainerEncryptionParamsTest.IV_BYTES.clone()), new javax.crypto.spec.SecretKeySpec(android.content.pm.ContainerEncryptionParamsTest.ENC_KEY_BYTES.clone(), "RAW"), new java.lang.String(android.content.pm.ContainerEncryptionParamsTest.MAC_ALGORITHM), null, new javax.crypto.spec.SecretKeySpec(android.content.pm.ContainerEncryptionParamsTest.MAC_KEY_BYTES.clone(), "RAW"), "broken".getBytes(), android.content.pm.ContainerEncryptionParamsTest.AUTHENTICATED_START, android.content.pm.ContainerEncryptionParamsTest.ENCRYPTED_START, android.content.pm.ContainerEncryptionParamsTest.DATA_END);
        assertFalse(params1.equals(params2));
    }

    public void testEquals_AuthenticatedStart_Failure() throws java.lang.Exception {
        android.content.pm.ContainerEncryptionParams params1 = new android.content.pm.ContainerEncryptionParams(android.content.pm.ContainerEncryptionParamsTest.ENC_ALGORITHM, android.content.pm.ContainerEncryptionParamsTest.ENC_PARAMS, android.content.pm.ContainerEncryptionParamsTest.ENC_KEY, android.content.pm.ContainerEncryptionParamsTest.MAC_ALGORITHM, null, android.content.pm.ContainerEncryptionParamsTest.MAC_KEY, android.content.pm.ContainerEncryptionParamsTest.MAC_TAG, android.content.pm.ContainerEncryptionParamsTest.AUTHENTICATED_START, android.content.pm.ContainerEncryptionParamsTest.ENCRYPTED_START, android.content.pm.ContainerEncryptionParamsTest.DATA_END);
        android.content.pm.ContainerEncryptionParams params2 = new android.content.pm.ContainerEncryptionParams(new java.lang.String(android.content.pm.ContainerEncryptionParamsTest.ENC_ALGORITHM), new javax.crypto.spec.IvParameterSpec(android.content.pm.ContainerEncryptionParamsTest.IV_BYTES.clone()), new javax.crypto.spec.SecretKeySpec(android.content.pm.ContainerEncryptionParamsTest.ENC_KEY_BYTES.clone(), "RAW"), new java.lang.String(android.content.pm.ContainerEncryptionParamsTest.MAC_ALGORITHM), null, new javax.crypto.spec.SecretKeySpec(android.content.pm.ContainerEncryptionParamsTest.MAC_KEY_BYTES.clone(), "RAW"), android.content.pm.ContainerEncryptionParamsTest.MAC_TAG, android.content.pm.ContainerEncryptionParamsTest.AUTHENTICATED_START - 1, android.content.pm.ContainerEncryptionParamsTest.ENCRYPTED_START, android.content.pm.ContainerEncryptionParamsTest.DATA_END);
        assertFalse(params1.equals(params2));
    }

    public void testEquals_EncryptedStart_Failure() throws java.lang.Exception {
        android.content.pm.ContainerEncryptionParams params1 = new android.content.pm.ContainerEncryptionParams(android.content.pm.ContainerEncryptionParamsTest.ENC_ALGORITHM, android.content.pm.ContainerEncryptionParamsTest.ENC_PARAMS, android.content.pm.ContainerEncryptionParamsTest.ENC_KEY, android.content.pm.ContainerEncryptionParamsTest.MAC_ALGORITHM, null, android.content.pm.ContainerEncryptionParamsTest.MAC_KEY, android.content.pm.ContainerEncryptionParamsTest.MAC_TAG, android.content.pm.ContainerEncryptionParamsTest.AUTHENTICATED_START, android.content.pm.ContainerEncryptionParamsTest.ENCRYPTED_START, android.content.pm.ContainerEncryptionParamsTest.DATA_END);
        android.content.pm.ContainerEncryptionParams params2 = new android.content.pm.ContainerEncryptionParams(new java.lang.String(android.content.pm.ContainerEncryptionParamsTest.ENC_ALGORITHM), new javax.crypto.spec.IvParameterSpec(android.content.pm.ContainerEncryptionParamsTest.IV_BYTES.clone()), new javax.crypto.spec.SecretKeySpec(android.content.pm.ContainerEncryptionParamsTest.ENC_KEY_BYTES.clone(), "RAW"), new java.lang.String(android.content.pm.ContainerEncryptionParamsTest.MAC_ALGORITHM), null, new javax.crypto.spec.SecretKeySpec(android.content.pm.ContainerEncryptionParamsTest.MAC_KEY_BYTES.clone(), "RAW"), android.content.pm.ContainerEncryptionParamsTest.MAC_TAG, android.content.pm.ContainerEncryptionParamsTest.AUTHENTICATED_START, android.content.pm.ContainerEncryptionParamsTest.ENCRYPTED_START - 1, android.content.pm.ContainerEncryptionParamsTest.DATA_END);
        assertFalse(params1.equals(params2));
    }

    public void testEquals_DataEnd_Failure() throws java.lang.Exception {
        android.content.pm.ContainerEncryptionParams params1 = new android.content.pm.ContainerEncryptionParams(android.content.pm.ContainerEncryptionParamsTest.ENC_ALGORITHM, android.content.pm.ContainerEncryptionParamsTest.ENC_PARAMS, android.content.pm.ContainerEncryptionParamsTest.ENC_KEY, android.content.pm.ContainerEncryptionParamsTest.MAC_ALGORITHM, null, android.content.pm.ContainerEncryptionParamsTest.MAC_KEY, android.content.pm.ContainerEncryptionParamsTest.MAC_TAG, android.content.pm.ContainerEncryptionParamsTest.AUTHENTICATED_START, android.content.pm.ContainerEncryptionParamsTest.ENCRYPTED_START, android.content.pm.ContainerEncryptionParamsTest.DATA_END);
        android.content.pm.ContainerEncryptionParams params2 = new android.content.pm.ContainerEncryptionParams(new java.lang.String(android.content.pm.ContainerEncryptionParamsTest.ENC_ALGORITHM), new javax.crypto.spec.IvParameterSpec(android.content.pm.ContainerEncryptionParamsTest.IV_BYTES.clone()), new javax.crypto.spec.SecretKeySpec(android.content.pm.ContainerEncryptionParamsTest.ENC_KEY_BYTES.clone(), "RAW"), new java.lang.String(android.content.pm.ContainerEncryptionParamsTest.MAC_ALGORITHM), null, new javax.crypto.spec.SecretKeySpec(android.content.pm.ContainerEncryptionParamsTest.MAC_KEY_BYTES.clone(), "RAW"), android.content.pm.ContainerEncryptionParamsTest.MAC_TAG, android.content.pm.ContainerEncryptionParamsTest.AUTHENTICATED_START, android.content.pm.ContainerEncryptionParamsTest.ENCRYPTED_START, android.content.pm.ContainerEncryptionParamsTest.DATA_END + 1);
        assertFalse(params1.equals(params2));
    }

    public void testHashCode_Success() throws java.lang.Exception {
        android.content.pm.ContainerEncryptionParams params1 = new android.content.pm.ContainerEncryptionParams(android.content.pm.ContainerEncryptionParamsTest.ENC_ALGORITHM, android.content.pm.ContainerEncryptionParamsTest.ENC_PARAMS, android.content.pm.ContainerEncryptionParamsTest.ENC_KEY, android.content.pm.ContainerEncryptionParamsTest.MAC_ALGORITHM, null, android.content.pm.ContainerEncryptionParamsTest.MAC_KEY, android.content.pm.ContainerEncryptionParamsTest.MAC_TAG, android.content.pm.ContainerEncryptionParamsTest.AUTHENTICATED_START, android.content.pm.ContainerEncryptionParamsTest.ENCRYPTED_START, android.content.pm.ContainerEncryptionParamsTest.DATA_END);
        android.content.pm.ContainerEncryptionParams params2 = new android.content.pm.ContainerEncryptionParams(new java.lang.String(android.content.pm.ContainerEncryptionParamsTest.ENC_ALGORITHM), new javax.crypto.spec.IvParameterSpec(android.content.pm.ContainerEncryptionParamsTest.IV_BYTES.clone()), new javax.crypto.spec.SecretKeySpec(android.content.pm.ContainerEncryptionParamsTest.ENC_KEY_BYTES.clone(), "RAW"), new java.lang.String(android.content.pm.ContainerEncryptionParamsTest.MAC_ALGORITHM), null, new javax.crypto.spec.SecretKeySpec(android.content.pm.ContainerEncryptionParamsTest.MAC_KEY_BYTES.clone(), "RAW"), android.content.pm.ContainerEncryptionParamsTest.MAC_TAG, android.content.pm.ContainerEncryptionParamsTest.AUTHENTICATED_START, android.content.pm.ContainerEncryptionParamsTest.ENCRYPTED_START, android.content.pm.ContainerEncryptionParamsTest.DATA_END);
        assertEquals(params1.hashCode(), params2.hashCode());
    }

    public void testHashCode_EncAlgo_Failure() throws java.lang.Exception {
        android.content.pm.ContainerEncryptionParams params1 = new android.content.pm.ContainerEncryptionParams(android.content.pm.ContainerEncryptionParamsTest.ENC_ALGORITHM, android.content.pm.ContainerEncryptionParamsTest.ENC_PARAMS, android.content.pm.ContainerEncryptionParamsTest.ENC_KEY, android.content.pm.ContainerEncryptionParamsTest.MAC_ALGORITHM, null, android.content.pm.ContainerEncryptionParamsTest.MAC_KEY, android.content.pm.ContainerEncryptionParamsTest.MAC_TAG, android.content.pm.ContainerEncryptionParamsTest.AUTHENTICATED_START, android.content.pm.ContainerEncryptionParamsTest.ENCRYPTED_START, android.content.pm.ContainerEncryptionParamsTest.DATA_END);
        android.content.pm.ContainerEncryptionParams params2 = new android.content.pm.ContainerEncryptionParams(new java.lang.String("AES-256/CBC/PKCS7Padding"), new javax.crypto.spec.IvParameterSpec(android.content.pm.ContainerEncryptionParamsTest.IV_BYTES.clone()), new javax.crypto.spec.SecretKeySpec(android.content.pm.ContainerEncryptionParamsTest.ENC_KEY_BYTES.clone(), "RAW"), new java.lang.String(android.content.pm.ContainerEncryptionParamsTest.MAC_ALGORITHM), null, new javax.crypto.spec.SecretKeySpec(android.content.pm.ContainerEncryptionParamsTest.MAC_KEY_BYTES.clone(), "RAW"), android.content.pm.ContainerEncryptionParamsTest.MAC_TAG, android.content.pm.ContainerEncryptionParamsTest.AUTHENTICATED_START, android.content.pm.ContainerEncryptionParamsTest.ENCRYPTED_START, android.content.pm.ContainerEncryptionParamsTest.DATA_END);
        assertFalse(params1.hashCode() == params2.hashCode());
    }

    public void testHashCode_EncParams_Failure() throws java.lang.Exception {
        android.content.pm.ContainerEncryptionParams params1 = new android.content.pm.ContainerEncryptionParams(android.content.pm.ContainerEncryptionParamsTest.ENC_ALGORITHM, android.content.pm.ContainerEncryptionParamsTest.ENC_PARAMS, android.content.pm.ContainerEncryptionParamsTest.ENC_KEY, android.content.pm.ContainerEncryptionParamsTest.MAC_ALGORITHM, null, android.content.pm.ContainerEncryptionParamsTest.MAC_KEY, android.content.pm.ContainerEncryptionParamsTest.MAC_TAG, android.content.pm.ContainerEncryptionParamsTest.AUTHENTICATED_START, android.content.pm.ContainerEncryptionParamsTest.ENCRYPTED_START, android.content.pm.ContainerEncryptionParamsTest.DATA_END);
        android.content.pm.ContainerEncryptionParams params2 = new android.content.pm.ContainerEncryptionParams(new java.lang.String(android.content.pm.ContainerEncryptionParamsTest.ENC_ALGORITHM), new javax.crypto.spec.IvParameterSpec("BLAHBLAH".getBytes()), new javax.crypto.spec.SecretKeySpec(android.content.pm.ContainerEncryptionParamsTest.ENC_KEY_BYTES.clone(), "RAW"), new java.lang.String(android.content.pm.ContainerEncryptionParamsTest.MAC_ALGORITHM), null, new javax.crypto.spec.SecretKeySpec(android.content.pm.ContainerEncryptionParamsTest.MAC_KEY_BYTES.clone(), "RAW"), android.content.pm.ContainerEncryptionParamsTest.MAC_TAG, android.content.pm.ContainerEncryptionParamsTest.AUTHENTICATED_START, android.content.pm.ContainerEncryptionParamsTest.ENCRYPTED_START, android.content.pm.ContainerEncryptionParamsTest.DATA_END);
        assertFalse(params1.hashCode() == params2.hashCode());
    }

    public void testHashCode_EncKey_Failure() throws java.lang.Exception {
        android.content.pm.ContainerEncryptionParams params1 = new android.content.pm.ContainerEncryptionParams(android.content.pm.ContainerEncryptionParamsTest.ENC_ALGORITHM, android.content.pm.ContainerEncryptionParamsTest.ENC_PARAMS, android.content.pm.ContainerEncryptionParamsTest.ENC_KEY, android.content.pm.ContainerEncryptionParamsTest.MAC_ALGORITHM, null, android.content.pm.ContainerEncryptionParamsTest.MAC_KEY, android.content.pm.ContainerEncryptionParamsTest.MAC_TAG, android.content.pm.ContainerEncryptionParamsTest.AUTHENTICATED_START, android.content.pm.ContainerEncryptionParamsTest.ENCRYPTED_START, android.content.pm.ContainerEncryptionParamsTest.DATA_END);
        android.content.pm.ContainerEncryptionParams params2 = new android.content.pm.ContainerEncryptionParams(new java.lang.String(android.content.pm.ContainerEncryptionParamsTest.ENC_ALGORITHM), new javax.crypto.spec.IvParameterSpec(android.content.pm.ContainerEncryptionParamsTest.IV_BYTES.clone()), new javax.crypto.spec.SecretKeySpec("BLAHBLAH".getBytes(), "RAW"), new java.lang.String(android.content.pm.ContainerEncryptionParamsTest.MAC_ALGORITHM), null, new javax.crypto.spec.SecretKeySpec(android.content.pm.ContainerEncryptionParamsTest.MAC_KEY_BYTES.clone(), "RAW"), android.content.pm.ContainerEncryptionParamsTest.MAC_TAG, android.content.pm.ContainerEncryptionParamsTest.AUTHENTICATED_START, android.content.pm.ContainerEncryptionParamsTest.ENCRYPTED_START, android.content.pm.ContainerEncryptionParamsTest.DATA_END);
        assertFalse(params1.hashCode() == params2.hashCode());
    }

    public void testHashCode_MacAlgo_Failure() throws java.lang.Exception {
        android.content.pm.ContainerEncryptionParams params1 = new android.content.pm.ContainerEncryptionParams(android.content.pm.ContainerEncryptionParamsTest.ENC_ALGORITHM, android.content.pm.ContainerEncryptionParamsTest.ENC_PARAMS, android.content.pm.ContainerEncryptionParamsTest.ENC_KEY, android.content.pm.ContainerEncryptionParamsTest.MAC_ALGORITHM, null, android.content.pm.ContainerEncryptionParamsTest.MAC_KEY, android.content.pm.ContainerEncryptionParamsTest.MAC_TAG, android.content.pm.ContainerEncryptionParamsTest.AUTHENTICATED_START, android.content.pm.ContainerEncryptionParamsTest.ENCRYPTED_START, android.content.pm.ContainerEncryptionParamsTest.DATA_END);
        android.content.pm.ContainerEncryptionParams params2 = new android.content.pm.ContainerEncryptionParams(new java.lang.String(android.content.pm.ContainerEncryptionParamsTest.ENC_ALGORITHM), new javax.crypto.spec.IvParameterSpec(android.content.pm.ContainerEncryptionParamsTest.IV_BYTES.clone()), new javax.crypto.spec.SecretKeySpec(android.content.pm.ContainerEncryptionParamsTest.ENC_KEY_BYTES.clone(), "RAW"), "BLAHBLAH", null, new javax.crypto.spec.SecretKeySpec(android.content.pm.ContainerEncryptionParamsTest.MAC_KEY_BYTES.clone(), "RAW"), android.content.pm.ContainerEncryptionParamsTest.MAC_TAG, android.content.pm.ContainerEncryptionParamsTest.AUTHENTICATED_START, android.content.pm.ContainerEncryptionParamsTest.ENCRYPTED_START, android.content.pm.ContainerEncryptionParamsTest.DATA_END);
        assertFalse(params1.hashCode() == params2.hashCode());
    }

    public void testHashCode_MacKey_Failure() throws java.lang.Exception {
        android.content.pm.ContainerEncryptionParams params1 = new android.content.pm.ContainerEncryptionParams(android.content.pm.ContainerEncryptionParamsTest.ENC_ALGORITHM, android.content.pm.ContainerEncryptionParamsTest.ENC_PARAMS, android.content.pm.ContainerEncryptionParamsTest.ENC_KEY, android.content.pm.ContainerEncryptionParamsTest.MAC_ALGORITHM, null, android.content.pm.ContainerEncryptionParamsTest.MAC_KEY, android.content.pm.ContainerEncryptionParamsTest.MAC_TAG, android.content.pm.ContainerEncryptionParamsTest.AUTHENTICATED_START, android.content.pm.ContainerEncryptionParamsTest.ENCRYPTED_START, android.content.pm.ContainerEncryptionParamsTest.DATA_END);
        android.content.pm.ContainerEncryptionParams params2 = new android.content.pm.ContainerEncryptionParams(new java.lang.String(android.content.pm.ContainerEncryptionParamsTest.ENC_ALGORITHM), new javax.crypto.spec.IvParameterSpec(android.content.pm.ContainerEncryptionParamsTest.IV_BYTES.clone()), new javax.crypto.spec.SecretKeySpec(android.content.pm.ContainerEncryptionParamsTest.ENC_KEY_BYTES.clone(), "RAW"), new java.lang.String(android.content.pm.ContainerEncryptionParamsTest.MAC_ALGORITHM), null, new javax.crypto.spec.SecretKeySpec("FAKE_MAC_KEY".getBytes(), "RAW"), android.content.pm.ContainerEncryptionParamsTest.MAC_TAG, android.content.pm.ContainerEncryptionParamsTest.AUTHENTICATED_START, android.content.pm.ContainerEncryptionParamsTest.ENCRYPTED_START, android.content.pm.ContainerEncryptionParamsTest.DATA_END);
        assertFalse(params1.hashCode() == params2.hashCode());
    }

    public void testHashCode_MacTag_Failure() throws java.lang.Exception {
        android.content.pm.ContainerEncryptionParams params1 = new android.content.pm.ContainerEncryptionParams(android.content.pm.ContainerEncryptionParamsTest.ENC_ALGORITHM, android.content.pm.ContainerEncryptionParamsTest.ENC_PARAMS, android.content.pm.ContainerEncryptionParamsTest.ENC_KEY, android.content.pm.ContainerEncryptionParamsTest.MAC_ALGORITHM, null, android.content.pm.ContainerEncryptionParamsTest.MAC_KEY, android.content.pm.ContainerEncryptionParamsTest.MAC_TAG, android.content.pm.ContainerEncryptionParamsTest.AUTHENTICATED_START, android.content.pm.ContainerEncryptionParamsTest.ENCRYPTED_START, android.content.pm.ContainerEncryptionParamsTest.DATA_END);
        android.content.pm.ContainerEncryptionParams params2 = new android.content.pm.ContainerEncryptionParams(new java.lang.String(android.content.pm.ContainerEncryptionParamsTest.ENC_ALGORITHM), new javax.crypto.spec.IvParameterSpec(android.content.pm.ContainerEncryptionParamsTest.IV_BYTES.clone()), new javax.crypto.spec.SecretKeySpec(android.content.pm.ContainerEncryptionParamsTest.ENC_KEY_BYTES.clone(), "RAW"), new java.lang.String(android.content.pm.ContainerEncryptionParamsTest.MAC_ALGORITHM), null, new javax.crypto.spec.SecretKeySpec(android.content.pm.ContainerEncryptionParamsTest.MAC_KEY_BYTES.clone(), "RAW"), "broken".getBytes(), android.content.pm.ContainerEncryptionParamsTest.AUTHENTICATED_START, android.content.pm.ContainerEncryptionParamsTest.ENCRYPTED_START, android.content.pm.ContainerEncryptionParamsTest.DATA_END);
        assertFalse(params1.hashCode() == params2.hashCode());
    }

    public void testHashCode_AuthenticatedStart_Failure() throws java.lang.Exception {
        android.content.pm.ContainerEncryptionParams params1 = new android.content.pm.ContainerEncryptionParams(android.content.pm.ContainerEncryptionParamsTest.ENC_ALGORITHM, android.content.pm.ContainerEncryptionParamsTest.ENC_PARAMS, android.content.pm.ContainerEncryptionParamsTest.ENC_KEY, android.content.pm.ContainerEncryptionParamsTest.MAC_ALGORITHM, null, android.content.pm.ContainerEncryptionParamsTest.MAC_KEY, android.content.pm.ContainerEncryptionParamsTest.MAC_TAG, android.content.pm.ContainerEncryptionParamsTest.AUTHENTICATED_START, android.content.pm.ContainerEncryptionParamsTest.ENCRYPTED_START, android.content.pm.ContainerEncryptionParamsTest.DATA_END);
        android.content.pm.ContainerEncryptionParams params2 = new android.content.pm.ContainerEncryptionParams(new java.lang.String(android.content.pm.ContainerEncryptionParamsTest.ENC_ALGORITHM), new javax.crypto.spec.IvParameterSpec(android.content.pm.ContainerEncryptionParamsTest.IV_BYTES.clone()), new javax.crypto.spec.SecretKeySpec(android.content.pm.ContainerEncryptionParamsTest.ENC_KEY_BYTES.clone(), "RAW"), new java.lang.String(android.content.pm.ContainerEncryptionParamsTest.MAC_ALGORITHM), null, new javax.crypto.spec.SecretKeySpec(android.content.pm.ContainerEncryptionParamsTest.MAC_KEY_BYTES.clone(), "RAW"), android.content.pm.ContainerEncryptionParamsTest.MAC_TAG, android.content.pm.ContainerEncryptionParamsTest.AUTHENTICATED_START - 1, android.content.pm.ContainerEncryptionParamsTest.ENCRYPTED_START, android.content.pm.ContainerEncryptionParamsTest.DATA_END);
        assertFalse(params1.hashCode() == params2.hashCode());
    }

    public void testHashCode_EncryptedStart_Failure() throws java.lang.Exception {
        android.content.pm.ContainerEncryptionParams params1 = new android.content.pm.ContainerEncryptionParams(android.content.pm.ContainerEncryptionParamsTest.ENC_ALGORITHM, android.content.pm.ContainerEncryptionParamsTest.ENC_PARAMS, android.content.pm.ContainerEncryptionParamsTest.ENC_KEY, android.content.pm.ContainerEncryptionParamsTest.MAC_ALGORITHM, null, android.content.pm.ContainerEncryptionParamsTest.MAC_KEY, android.content.pm.ContainerEncryptionParamsTest.MAC_TAG, android.content.pm.ContainerEncryptionParamsTest.AUTHENTICATED_START, android.content.pm.ContainerEncryptionParamsTest.ENCRYPTED_START, android.content.pm.ContainerEncryptionParamsTest.DATA_END);
        android.content.pm.ContainerEncryptionParams params2 = new android.content.pm.ContainerEncryptionParams(new java.lang.String(android.content.pm.ContainerEncryptionParamsTest.ENC_ALGORITHM), new javax.crypto.spec.IvParameterSpec(android.content.pm.ContainerEncryptionParamsTest.IV_BYTES.clone()), new javax.crypto.spec.SecretKeySpec(android.content.pm.ContainerEncryptionParamsTest.ENC_KEY_BYTES.clone(), "RAW"), new java.lang.String(android.content.pm.ContainerEncryptionParamsTest.MAC_ALGORITHM), null, new javax.crypto.spec.SecretKeySpec(android.content.pm.ContainerEncryptionParamsTest.MAC_KEY_BYTES.clone(), "RAW"), android.content.pm.ContainerEncryptionParamsTest.MAC_TAG, android.content.pm.ContainerEncryptionParamsTest.AUTHENTICATED_START, android.content.pm.ContainerEncryptionParamsTest.ENCRYPTED_START - 1, android.content.pm.ContainerEncryptionParamsTest.DATA_END);
        assertFalse(params1.hashCode() == params2.hashCode());
    }

    public void testHashCode_DataEnd_Failure() throws java.lang.Exception {
        android.content.pm.ContainerEncryptionParams params1 = new android.content.pm.ContainerEncryptionParams(android.content.pm.ContainerEncryptionParamsTest.ENC_ALGORITHM, android.content.pm.ContainerEncryptionParamsTest.ENC_PARAMS, android.content.pm.ContainerEncryptionParamsTest.ENC_KEY, android.content.pm.ContainerEncryptionParamsTest.MAC_ALGORITHM, null, android.content.pm.ContainerEncryptionParamsTest.MAC_KEY, android.content.pm.ContainerEncryptionParamsTest.MAC_TAG, android.content.pm.ContainerEncryptionParamsTest.AUTHENTICATED_START, android.content.pm.ContainerEncryptionParamsTest.ENCRYPTED_START, android.content.pm.ContainerEncryptionParamsTest.DATA_END);
        android.content.pm.ContainerEncryptionParams params2 = new android.content.pm.ContainerEncryptionParams(new java.lang.String(android.content.pm.ContainerEncryptionParamsTest.ENC_ALGORITHM), new javax.crypto.spec.IvParameterSpec(android.content.pm.ContainerEncryptionParamsTest.IV_BYTES.clone()), new javax.crypto.spec.SecretKeySpec(android.content.pm.ContainerEncryptionParamsTest.ENC_KEY_BYTES.clone(), "RAW"), new java.lang.String(android.content.pm.ContainerEncryptionParamsTest.MAC_ALGORITHM), null, new javax.crypto.spec.SecretKeySpec(android.content.pm.ContainerEncryptionParamsTest.MAC_KEY_BYTES.clone(), "RAW"), android.content.pm.ContainerEncryptionParamsTest.MAC_TAG, android.content.pm.ContainerEncryptionParamsTest.AUTHENTICATED_START, android.content.pm.ContainerEncryptionParamsTest.ENCRYPTED_START, android.content.pm.ContainerEncryptionParamsTest.DATA_END + 1);
        assertFalse(params1.hashCode() == params2.hashCode());
    }
}

